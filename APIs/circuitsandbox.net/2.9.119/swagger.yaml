swagger: '2.0'
schemes:
  - https
host: circuitsandbox.net
basePath: /rest/v2
info:
  description: |-
    Circuit REST API to interact with the Circuit system.

    [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
  title: REST API Version 2
  version: 2.9.119
  x-apisguru-categories:
    - messaging
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://pbs.twimg.com/profile_images/927933988269903874/4jU82-IJ_400x400.jpg'
  x-origin:
    - format: swagger
      url: 'https://circuitsandbox.net/rest/v2/swagger'
      version: '2.0'
  x-preferred: true
  x-providerName: circuitsandbox.net
securityDefinitions:
  oauth:
    authorizationUrl: 'https://circuitsandbox.net/oauth/authorize'
    flow: implicit
    scopes:
      ALL: allows full access to all functionalities of the REST API
      CALLS: allows to start or join real time collaboration session
      CREATE_CONVERSATIONS_CONTENT: Create content of conversations
      DELETE_CONVERSATIONS_CONTENT: Delete content of conversations
      MANAGE_CONVERSATIONS: Manage conversations
      MANAGE_PRESENCE: Manage presence state
      MENTION_EVENT: allows to receive text item events in which the user was mentioned
      MODERATE_CONVERSATIONS: MOderate conversations
      ORGANIZE_CONVERSATIONS: Organize conversations
      READ_CONVERSATIONS: allows to read conversations of the authenticated user
      READ_USER: allows to read user information for all users that belong to the tenant of the authenticated user
      READ_USER_PROFILE: allows to read the user profile of the authenticated user
      SEARCH_CONVERSATIONS: Search conversations
      UPDATE_CONVERSATION_CONTENT: Update content of conversations
      USER_MANAGEMENT: 'allows to create, update and delete users'
      USER_TO_USER: User2User
      WRITE_CONVERSATIONS: allows to create and update conversations of the authenticated user or to post messages
      WRITE_USER_PROFILE: allows to update the user profile of the authenticated user
    type: oauth2
paths:
  /conversations:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets a list of conversations and communities the authenticated user participates in.
      operationId: getConversations
      parameters:
        - description: 'The modification time of the conversation in UTC format. During the query the conversations before (<i>default</i>) or after this timestamp are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified conversations are returned'
          format: date-time
          in: query
          name: modTime
          required: false
          type: string
        - default: BEFORE
          description: The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER
          enum:
            - BEFORE
            - AFTER
          in: query
          maxLength: 2048
          name: direction
          required: false
          type: string
        - default: 25
          description: The maximum number of returned results (default 25). The maximum allowed value is 100.
          format: int32
          in: query
          maximum: 100
          minimum: 1
          name: results
          required: false
          type: number
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The matching conversations
          schema:
            items:
              $ref: '#/definitions/Conversation'
            type: array
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Gets a list of conversations
      tags:
        - Conversation Queries
  /conversations/community:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets a list of communities. This endpoint can be used to explore the communities the authenticated user could join.
      operationId: getCommunityConversations
      parameters:
        - default: ALPHABETICALLY
          description: Defines the type of sorting for the community conversations (default is alphabetical)
          enum:
            - ALPHABETICALLY
            - RECENT_ACTIVITY
            - POPULARITY
          in: query
          maxLength: 2048
          name: sort
          required: false
          type: string
        - default: ASCENDING
          description: Defines the ordering of the conversations (default is ascending)
          enum:
            - ASCENDING
            - DESCENDING
          in: query
          maxLength: 2048
          name: order
          required: false
          type: string
        - default: false
          description: 'If set to false only conversations are returned where the user is no member of, otherwise all community conversations are returned'
          in: query
          name: includeOwn
          required: false
          type: boolean
        - default: 0
          description: The index of the conversation that is the first one that has to be returned. E.g. if a request starts with startIndex 40 and results 20 the conversations 40 to 60 are returned
          format: int32
          in: query
          maximum: 255
          minimum: 0
          name: startIndex
          required: false
          type: number
        - default: 25
          description: The maximum number of returned results (default 25). The maximum allowed value is 100.
          format: int32
          in: query
          maximum: 100
          minimum: 1
          name: results
          required: false
          type: number
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The matching conversations
          schema:
            items:
              $ref: '#/definitions/Conversation'
            type: array
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul>a field constraint is violated</ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Gets a list of communities
      tags:
        - Conversation Queries
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Creates a community. Communities are open conversations that anyone in a Circuit domain (tenant) can join without having to be added by another user.
      operationId: createCommunityConversation
      parameters:
        - collectionFormat: multi
          description: 'list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added'
          in: formData
          items:
            maxLength: 2048
            type: string
          name: participants
          required: false
          type: array
        - description: An optional description for the community conversation
          in: formData
          maxLength: 2048
          name: description
          required: false
          type: string
        - description: An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)
          in: formData
          maxLength: 2048
          name: topic
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The conversation was created successfully and can be accessed via the conversation ID
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not provided in the correct format</li><li> or an valid email address</li><li>or one or more of the user do not exist</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Creates a community conversation
      tags:
        - Conversation Creation
  '/conversations/community/{convId}':
    put:
      consumes:
        - application/x-www-form-urlencoded
      description: Updates the information of the given community.
      operationId: updateConversationCommunity
      parameters:
        - description: The ID of the conversation which should be updated
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: An optional description for the community conversation
          in: formData
          maxLength: 2048
          name: description
          required: false
          type: string
        - description: An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)
          in: formData
          maxLength: 2048
          name: topic
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the updated conversation object with the new topic / description
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the conversation is not of type COMMUNITY</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Updates the information of a community
      tags:
        - Conversation Management
  '/conversations/community/{convId}/join':
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: 'Adds the authenticated user to the given community (i.e., allows the user to join this community). Contrary to the operation of adding a new participant, this operation can only be performed by a user who is not yet a member of the community.'
      operationId: joinCommunityConversation
      parameters:
        - description: The ID of the conversation which the user will join
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the conversation object to which the participants was added
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not provided in the correct format</li><li> or an valid email address</li><li>or one or more of the user do not exist</li><li>the conversation does not exist</li><li>the conversation is not of type COMMUNITY</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Adds the authenticated user to a community
      tags:
        - Conversation Management
  '/conversations/community/{convId}/participants':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: Removes one or more participants from the given community. The last participant of a community cannot be removed. This operation can only be performed by a user who is already a member of the community.
      operationId: removeParticipantCommunity
      parameters:
        - description: The ID of the conversation from which the participant have to be removed
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - collectionFormat: multi
          description: The IDs or the unique email addresses of the Circuit users that have to be removed
          in: query
          items:
            maxLength: 6500
            type: string
          name: participants
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the conversation object from which the participants were removed.
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul></li>the userIds passed as parameter are not provided in the correct format</li><li> or an valid email address</li><li>or one or more of the user do not exist</li><li>the conversation does not exist</li><li>the conversation is not of type COMMUNITY</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Removes participants from a community
      tags:
        - Conversation Management
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Adds one or more participants to the given community. This operation can only be performed by a user who is already a member of the community.
      operationId: addParticipantCommunity
      parameters:
        - description: The ID of the conversation to which the participant has to be added.
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - collectionFormat: multi
          description: The IDs or the unique email addresses of the Circuit users that should to be added.
          in: formData
          items:
            maxLength: 6500
            type: string
          name: participants
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the conversation object to which the participants were added.
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not provided in the correct format</li><li> or an valid email address</li><li>or one or more of the user do not exist</li><li>the conversation does not exist</li><li>the conversation is not of type COMMUNITY</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Adds participants to a community
      tags:
        - Conversation Management
  /conversations/direct:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Checks if a 1-to-1 conversation between the authenticated user and the user with the provided userId exists.
      operationId: getDirectConversation
      parameters:
        - description: 'The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address'
          in: query
          maxLength: 2048
          name: participant
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The conversation was found and can be accessed via the conversation ID
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the data format of the passed user does not match either a UUID (user primary key)</li><li> or an valid email address</li><li>or the user does not exist</li><li>or the user is the same who initiates the request</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Checks for a 1-to-1 conversation
      tags:
        - Conversation Queries
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: 'Creates a 1-to-1 conversation between the authenticated user and the user with the provided userId. In case there is already an existing 1-to-1 conversation between these users, the endpoint returns the existing conversation.'
      operationId: createDirectConversation
      parameters:
        - description: 'The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address'
          in: formData
          maxLength: 2048
          name: participant
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The conversation was created successfully and can be accessed via the conversation ID
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the data format of the passed user does not match either a UUID (user primary key)</li><li> or an valid email address</li><li>or the user does not exist</li><li>or the user is the same who initiates the request</li></ul>'
        '401':
          description: The authentication was not successful
        '409':
          description: A conversation already exists. The response contains this conversation.
          schema:
            $ref: '#/definitions/Conversation'
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Creates a 1-to-1 conversation
      tags:
        - Conversation Creation
  /conversations/favorite:
    get:
      description: Gets the conversationIds which are marked as favorites.
      operationId: getFavoriteConversations
      responses:
        '200':
          description: A list of marked conversations or an empty response.
          schema:
            items:
              $ref: '#/definitions/String'
            type: array
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Gets favorite conversations
      tags:
        - Conversation Queries
  /conversations/group:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Creates a group conversation between three or more users. The authenticated user is directly added to this conversation.
      operationId: createGroupConversation
      parameters:
        - collectionFormat: multi
          description: 'A list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added'
          in: formData
          items:
            maxLength: 2048
            type: string
          name: participants
          required: true
          type: array
        - description: An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)
          in: formData
          maxLength: 2048
          name: topic
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The conversation was created successfully and can be accessed via the conversation ID
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not provided in the correct format</li><li> or an valid email address</li><li>or one or more of the user do not exist</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Creates a group conversation
      tags:
        - Conversation Creation
  '/conversations/group/{convId}':
    put:
      consumes:
        - application/x-www-form-urlencoded
      description: Updates the information of the given group conversation.
      operationId: updateConversationGroup
      parameters:
        - description: The ID of the conversation which should be updated
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)
          in: formData
          maxLength: 2048
          name: topic
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the updated conversation object with the new topic
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the conversation is not of type GROUP</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Updates the information of a group conversation
      tags:
        - Conversation Management
  '/conversations/group/{convId}/participants':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: Removes one or more participants from the given group conversation. The last participant of a group conversation cannot be removed. This operation can only be performed on behalf of a user who is already a member of the conversation.
      operationId: removeParticipantGroup
      parameters:
        - description: The ID of the conversation from which the participant have to be removed
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - collectionFormat: multi
          description: The IDs or the unique email addresses of the Circuit users that have to be removed
          in: query
          items:
            maxLength: 6500
            type: string
          name: participants
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the conversation object from which the participants were removed.
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not provided in the correct format</li><li> or an valid email address</li><li>or one or more of the user do not exist</li><li>the conversation does not exist</li><li>the conversation is not of type GROUP</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Removes participants from a group conversation
      tags:
        - Conversation Management
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Adds one or more participants to the given group conversation. This operation can only be performed by a user who is already a member of the conversation.
      operationId: addParticipantGroup
      parameters:
        - description: The ID of the conversation to which the participant has to be added.
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - collectionFormat: multi
          description: The IDs or the unique email addresses of the Circuit users that should to be added.
          in: formData
          items:
            maxLength: 6500
            type: string
          name: participants
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the conversation object to which the participants were added.
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not provided in the correct format</li><li> or an valid email address</li><li>or one or more of the user do not exist</li><li>the conversation does not exist</li><li>the conversation is not of type GROUP</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - MANAGE_CONVERSATIONS
      summary: Adds participants to a group conversation
      tags:
        - Conversation Management
  /conversations/messages/flag:
    get:
      description: Gets a list of all the messages the authenticated user has flagged. This endpoint should be used carefully in case where the authenticated user has a lot of flagged messages.
      operationId: getFlagItemConv
      responses:
        '200':
          description: Gets the list of flagged items
          schema:
            items:
              $ref: '#/definitions/ConversationItem'
            type: array
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Gets a list of the flagged messages
      tags:
        - Messaging (Advanced)
  '/conversations/messages/{itemId}':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Returns a text item for a given item id
      operationId: getSingleConversationtem
      parameters:
        - description: The ID of the item that will be returned
          in: path
          maxLength: 2048
          name: itemId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The item was successful returned
          schema:
            $ref: '#/definitions/ConversationItem'
        '400':
          description: The item with the given id was not found
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Returns a text item
      tags:
        - Messaging (Basic)
  /conversations/resolveinvitetoken:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Resolves an invite token to a conversation
      operationId: resolveInvitationToken
      parameters:
        - description: The invite token to resolve
          in: query
          maxLength: 2048
          name: token
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Returns the conversation object that belongs to the invite token if you are member of the conversation
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: In case no invitation token was send
        '401':
          description: The authentication was not successful
        '404':
          description: 'If the token does not exist or you are not member of the conversation '
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Resolves an invite token to a conversation
      tags:
        - Conversation Management
  /conversations/search:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Performs a search for conversation content. A maximum of 100 conversations is returned. If you hit this limit you should refine the search term.
      operationId: searchConversations
      parameters:
        - description: The search term
          in: query
          maxLength: 2048
          name: term
          required: true
          type: string
        - default: false
          description: Optional parameter to specify if a deep or normal search is executed. In a deep search all matching item IDs inside every conversation are returned (up to a maximum of 100). For a normal search only the conversation IDs are returned. Default is a normal search (without item IDs).
          in: query
          name: includeItemIds
          required: false
          type: boolean
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: A list of conversations and items that match the term
          schema:
            $ref: '#/definitions/ConversationSearchResult'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
      summary: Performs a conversation search
      tags:
        - Conversation Queries
  '/conversations/{convId}':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets a conversation based on the given ID.
      operationId: getConversationbyId
      parameters:
        - description: The ID of the conversation which should be updated
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the conversation object
          schema:
            $ref: '#/definitions/Conversation'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Gets a conversation
      tags:
        - Conversation Queries
  '/conversations/{convId}/conversationdetails':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: 'Gets the conference details of the given conversation. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone.'
      operationId: getJoinDetails
      parameters:
        - description: The ID of the conversation for which the join details should be returned
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The join details.
          schema:
            $ref: '#/definitions/ConversationDetails'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Gets the conference details of a conversation
      tags:
        - Conversation Management
  '/conversations/{convId}/favorite':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: Removes a conversation from favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations.
      operationId: deleteFavorite
      parameters:
        - description: The ID of the conversation which will be unmarked as favorite
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The conversation was successfully unmarked
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li><li>the conversation was not marked before</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
      summary: Removes a conversation from favorites
      tags:
        - Messaging (Advanced)
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Adds a conversation to the favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations.
      operationId: addFavorite
      parameters:
        - description: The ID of the conversation which will be marked as favorite
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The conversation was successfully marked
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
      summary: Adds a conversation to the favorites
      tags:
        - Messaging (Advanced)
  '/conversations/{convId}/items':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets a list of conversation items.
      operationId: getConversationItems
      parameters:
        - description: The ID of the conversation to which the items belong
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: 'The modification time of the item in UTC format. During the query the items before (default) or after this timestamps are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified items are returned'
          format: date-time
          in: query
          name: modTime
          required: false
          type: string
        - default: BEFORE
          description: The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER
          enum:
            - BEFORE
            - AFTER
          in: query
          maxLength: 2048
          name: direction
          required: false
          type: string
        - default: 25
          description: The maximum number of returned results (default 25). The maximum allowed value is 100.
          format: int32
          in: query
          maximum: 100
          minimum: 1
          name: results
          required: false
          type: number
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The matching conversation items
          schema:
            items:
              $ref: '#/definitions/ConversationItem'
            type: array
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
      summary: Gets a list of conversation items
      tags:
        - Messaging (Basic)
  '/conversations/{convId}/label':
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: 'Adds a label to a conversation, you can search and organize your conversations based on these labels'
      operationId: assignLabel
      parameters:
        - description: The ID of the conversation to which the label is added
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: 'The actual label '
          in: formData
          maxLength: 2048
          name: label
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The label was successfully added
          schema:
            $ref: '#/definitions/Label'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li><li>you reached the maximum of 250 labels</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - ORGANIZE_CONVERSATIONS
      summary: Adds a label to a conversation
      tags:
        - Conversation Management
  '/conversations/{convId}/label/{labelId}':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: 'Removes a label from a conversation, you can search and organize your conversations based on these labels'
      operationId: unassignLabel
      parameters:
        - description: The ID of the conversation from which the label is removed
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: not available
          in: path
          maxLength: 2048
          name: labelId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The label was successfully removed
          schema:
            $ref: '#/definitions/Label'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li><li>the label was not assigned to the conversation</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
      summary: Removes a label from a conversation
      tags:
        - Conversation Management
  '/conversations/{convId}/messages':
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Adds a message to the given conversation. This operation can be only performed on behalf of a user who is already a member of the conversation.
      operationId: addTextItem
      parameters:
        - description: The ID of the conversation to which the new item has to be added
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: 'The actual content of the item, is mandatory unless an attachment is added'
          in: formData
          maxLength: 16384
          name: content
          required: false
          type: string
        - collectionFormat: multi
          description: A comma separated list of attachment IDs from the file API.
          in: formData
          items:
            maxLength: 16000
            type: string
          name: attachments
          required: false
          type: array
        - description: The subject (headline) of the new text item
          in: formData
          maxLength: 255
          name: subject
          required: false
          type: string
        - description: not available
          in: formData
          maxLength: 32768
          name: formMetaData
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the new text item object
          schema:
            $ref: '#/definitions/ConversationItem'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - CREATE_CONVERSATIONS_CONTENT
      summary: Adds a message to a conversation
      tags:
        - Messaging (Basic)
  '/conversations/{convId}/messages/flag':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets a list of all the flagged messages in the given conversation.
      operationId: getFlagItem
      parameters:
        - description: The ID of the conversation to which the item belongs
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the list of flagged items
          schema:
            items:
              $ref: '#/definitions/ConversationItem'
            type: array
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
            - ORGANIZE_CONVERSATIONS
      summary: Gets a list of the flagged messages of a conversation
      tags:
        - Messaging (Advanced)
  '/conversations/{convId}/messages/{itemId}':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: 'Marks a message in the given conversation as deleted. Deleted messages are still part of the conversation, but their content is no more visible. This operation can only be performed on behalf of the message''s creator.'
      operationId: deleteTextItem
      parameters:
        - description: The ID of the conversation to which the item belongs
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: The ID of the item that will be deleted
          in: path
          maxLength: 2048
          name: itemId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the deleted text item object
          schema:
            $ref: '#/definitions/ConversationItem'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the item does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - DELETE_CONVERSATIONS_CONTENT
      summary: Deletes a message from a conversation
      tags:
        - Messaging (Basic)
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Adds a message to the existing item. The added message will be a child item of the message with the given itemId.
      operationId: addTextItemWithParent
      parameters:
        - description: The ID of the conversation to which the new item has to be added
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: The ID of the item to which the new one has to be added as child
          in: path
          maxLength: 2048
          name: itemId
          required: true
          type: string
        - description: The actual content of the item
          in: formData
          maxLength: 16384
          name: content
          required: false
          type: string
        - collectionFormat: multi
          description: not available
          in: formData
          items:
            maxLength: 4096
            type: string
          name: attachments
          required: false
          type: array
        - description: The subject (headline) of the new text item
          in: formData
          maxLength: 255
          name: subject
          required: false
          type: string
        - description: not available
          in: formData
          maxLength: 32768
          name: formMetaData
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the new text item object
          schema:
            $ref: '#/definitions/ConversationItem'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the parent item does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
      summary: Adds a message to an item
      tags:
        - Messaging (Basic)
    put:
      consumes:
        - application/x-www-form-urlencoded
      description: Updates the content or subject of the existing message. Only the creator of the message is allowed to perform this operation.
      operationId: updateTextItem
      parameters:
        - description: The ID of the conversation to which the item belongs
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: The ID of the item to update
          in: path
          maxLength: 2048
          name: itemId
          required: true
          type: string
        - description: The actual content of the item
          in: formData
          maxLength: 16384
          name: content
          required: false
          type: string
        - collectionFormat: multi
          description: not available
          in: formData
          items:
            maxLength: 16000
            type: string
          name: attachments
          required: false
          type: array
        - description: The subject (headline) of the new text item
          in: formData
          maxLength: 255
          name: subject
          required: false
          type: string
        - description: not available
          in: formData
          maxLength: 32768
          name: formMetaData
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the modified text item object
          schema:
            $ref: '#/definitions/ConversationItem'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - UPDATE_CONVERSATION_CONTENT
      summary: Updates a message
      tags:
        - Messaging (Basic)
  '/conversations/{convId}/messages/{itemId}/flag':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: Removes the flag from a given message that is posted to the given conversation.
      operationId: unFlagItem
      parameters:
        - description: The ID of the conversation to which the item belongs
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: The ID of the item that will be flagged
          in: path
          maxLength: 2048
          name: itemId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The flagged state of item was successfully removed
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the item does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - ORGANIZE_CONVERSATIONS
      summary: Removes the flag from a message
      tags:
        - Messaging (Advanced)
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Adds a flag to the given message in the given conversation.
      operationId: flagItem
      parameters:
        - description: The ID of the conversation to which the item belongs
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: The ID of the item that will be flagged
          in: path
          maxLength: 2048
          name: itemId
          required: true
          type: string
        - description: The time when the item was created
          in: formData
          maxLength: 2048
          name: itemCreationTime
          required: false
          type: string
        - description: The ID of the item's parent
          in: formData
          maxLength: 2048
          name: parentId
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The item was successful flagged
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the item does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - ORGANIZE_CONVERSATIONS
      summary: Adds a flag to a message in a conversation
      tags:
        - Messaging (Advanced)
  '/conversations/{convId}/messages/{itemId}/like':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: Removes a "like" from the given message in the given conversation
      operationId: unlikeItem
      parameters:
        - description: The ID of the conversation to which the item belongs
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: The ID of the item that will be unliked
          in: path
          maxLength: 2048
          name: itemId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The item was successful unliked
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the item does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - UPDATE_CONVERSATION_CONTENT
      summary: Removes a "like" from a message
      tags:
        - Messaging (Advanced)
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Adds a "like" to the given message in the given conversation
      operationId: likeItem
      parameters:
        - description: The ID of the conversation to which the item belongs
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: The ID of the item that will be liked
          in: path
          maxLength: 2048
          name: itemId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The item was successful liked
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the conversation does not exist</li><li>the item does not exist</li><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_CONVERSATIONS
            - UPDATE_CONVERSATION_CONTENT
      summary: Adds a "like" to a message
      tags:
        - Messaging (Advanced)
  '/conversations/{convId}/participants':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Performs a search for participants. The max number of participants is configurable. If more participants are available a search pointer is returned for consecutive calls.
      operationId: getParticipantsByConvId
      parameters:
        - description: The id of the conversation the participants are searched for.
          in: path
          maxLength: 2048
          name: convId
          required: true
          type: string
        - description: The page size of the hit list
          format: int32
          in: query
          maximum: 25
          minimum: 1
          name: pageSize
          required: true
          type: number
        - description: Part of name to filter the results
          in: query
          maxLength: 2048
          name: name
          required: false
          type: string
        - default: REGULAR
          description: Type of participant to filter the results
          enum:
            - REGULAR
            - MODERATOR
            - GUEST
            - FORMER
            - BOT
          in: query
          maxLength: 2048
          name: type
          required: false
          type: string
        - description: Pointer for paged output. Add to consecutive request to get next page
          in: query
          maxLength: 2048
          name: searchPointer
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: A list of conversations and items that match the term
          schema:
            items:
              $ref: '#/definitions/ConversationParticipantsList'
            type: array
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the user is no participant of the conversation</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
      summary: Performs a list of participants
      tags:
        - Conversation Queries
  /oauth/clientId:
    get:
      description: Gets a list of the client IDs (applications) that were created for this user.
      operationId: oAuthGetClientIds
      responses:
        '200':
          description: Gets the client IDs that allow to request for OAuth access
          schema:
            items:
              $ref: '#/definitions/OAuthClientId'
            type: array
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
      summary: Gets a list of client IDs
      tags:
        - OAuth 2.0
  /oauth/scopelist:
    get:
      description: Gets a list of available OAuth scopes
      operationId: oAuthGetScopeList
      responses:
        '200':
          description: The list of available OAuth scopes
          schema:
            items:
              $ref: '#/definitions/String'
            type: array
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
      summary: List of available OAuth scopes
      tags:
        - OAuth 2.0
  '/oauth/token/{tokenId}':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets the access token for the given token ID.
      operationId: oAuthValidateAccessToken
      parameters:
        - description: The unique id of the token to get the data for.
          in: path
          maxLength: 2048
          name: tokenId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Gets the access token
          schema:
            $ref: '#/definitions/ValidateAccessToken'
        '401':
          description: The authentication was not successful
        '404':
          description: In case the token was not found or the requester has no permission to access the token
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER_PROFILE
      summary: Gets an access token
      tags:
        - OAuth 2.0
  /rtc/sessions:
    get:
      description: Gets a list of active RTCsessions
      operationId: getActiveSessions
      responses:
        '200':
          description: The list of active RTCsessions was returned
          schema:
            $ref: '#/definitions/Label'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - CALLS
      summary: Gets a list of active sessions
      tags:
        - RTC
  /users:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Search for users based on an email address or username
      operationId: searchUser
      parameters:
        - description: Search for a user by name
          in: query
          maxLength: 2048
          name: name
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The users which match the search criteria
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '404':
          description: The search term did not much any results
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER
      summary: Search for users
      tags:
        - User Management
  /users/labels:
    get:
      description: Returns all labels of the user that were defined either explicit or implicit via assignment to conversations.
      operationId: getLabel
      responses:
        '200':
          description: List of labels
          schema:
            items:
              $ref: '#/definitions/Label'
            type: array
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER_PROFILE
            - ORGANIZE_CONVERSATIONS
      summary: Returns all user labels
      tags:
        - User Management
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Add a label to the list of user labels
      operationId: addLabel
      parameters:
        - description: The label value to add
          in: formData
          maxLength: 2048
          name: label
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The label was successfully added
          schema:
            $ref: '#/definitions/Label'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_USER_PROFILE
            - ORGANIZE_CONVERSATIONS
      summary: Add a user label
      tags:
        - User Management
  '/users/labels/{labelId}':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: Remove a label from the list of user labels
      operationId: removeLabel
      parameters:
        - description: not available
          in: path
          maxLength: 2048
          name: labelId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The label was successfully removed
          schema:
            $ref: '#/definitions/Label'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>a field constraint is violated</li><li>the label does not exist</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_USER_PROFILE
            - ORGANIZE_CONVERSATIONS
      summary: Remove a user label
      tags:
        - User Management
  /users/list:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Search multiple users given by id or email address.
      operationId: searchUsersList
      parameters:
        - collectionFormat: multi
          description: Multiple email addresses or UUIDs.
          in: query
          items:
            maxLength: 2048
            type: string
          name: name
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: At least one user was found and returned in a list
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
        '400':
          description: Bad Request
        '401':
          description: The authentication was not successful
        '404':
          description: No user was found
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER
      summary: Search multiple users.
      tags:
        - User Management
  /users/presence:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets the presence status of the users whose IDs or email addresses are given.
      operationId: getPresence
      parameters:
        - collectionFormat: multi
          description: A list of unique user IDs or email addresses of the users you want to query the presence state for
          in: query
          items:
            maxLength: 6500
            type: string
          name: userIds
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The presence states
          schema:
            items:
              $ref: '#/definitions/Presence'
            type: array
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the userIds passed as parameter are not provided in the correct format</li><li> or a valid email address</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '404':
          description: One or more of the users do not exist
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER
      summary: Gets the presence status
      tags:
        - User Management
    put:
      consumes:
        - application/x-www-form-urlencoded
      description: Updates the presence status of the authenticated user.
      operationId: setUserPresence
      parameters:
        - description: The user's presence.
          in: formData
          maxLength: 2048
          name: state
          required: true
          type: string
        - description: Timestamp until the DND state of the user is active. This field is mandatory when the state is set to DND.
          format: date-time
          in: formData
          name: dndUntil
          required: false
          type: string
        - default: false
          description: not available
          in: formData
          name: clearDND
          required: false
          type: boolean
        - description: An optional status message that is displayed instead of the location
          in: formData
          maxLength: 2048
          name: statusMessage
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The presence states
          schema:
            $ref: '#/definitions/Presence'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the presence state is DND and the data format of the passed dndUntil is missing </li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_USER_PROFILE
            - MANAGE_PRESENCE
      summary: Updates the presence status
      tags:
        - User Management
  /users/profile:
    get:
      description: Gets the authenticated user's profile information.
      operationId: getProfile
      responses:
        '200':
          description: Gets the authenticated user's profile information
          schema:
            $ref: '#/definitions/User'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER_PROFILE
      summary: Gets the authenticated user's profile information
      tags:
        - User Management
    put:
      consumes:
        - application/x-www-form-urlencoded
      description: Updates the user profile of the authenticated user
      operationId: updateProfile
      parameters:
        - description: The new firstname of the user
          in: formData
          maxLength: 128
          name: firstname
          required: false
          type: string
        - description: The new lastname of the user
          in: formData
          maxLength: 128
          name: lastname
          required: false
          type: string
        - description: The new job title of the user
          in: formData
          maxLength: 128
          name: jobTitle
          required: false
          type: string
        - description: 'The new locale of the user. One of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN.'
          enum:
            - EN_US
            - DE_DE
            - EN_GB
            - ES_ES
            - FR_FR
            - IT_IT
            - RU_RU
            - ZH_HANS_CN
          in: formData
          maxLength: 5
          name: locale
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The modified user object.
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the user does not exist</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - WRITE_USER_PROFILE
      summary: Updates the user profile
      tags:
        - User Management
  '/users/{id}':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets the profile information of the user with the given ID.
      operationId: getUserById
      parameters:
        - description: The unique ID or the email address of the user to fetch
          in: path
          maxLength: 2048
          name: id
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: 'The operation was successful, the user profile is returned'
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the data format of the passed user does not match either a UUID (user primary key)</li><li> or an valid email address</li><li>or a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '404':
          description: The user does not exist
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER
      summary: Gets the user's profile information
      tags:
        - User Management
  '/users/{id}/presence':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets the presence status of the users whose ID or email address is given.
      operationId: getUserPresence
      parameters:
        - description: The unique ID or the email address of the user to fetch.
          in: path
          maxLength: 2048
          name: id
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The presence state
          schema:
            $ref: '#/definitions/Presence'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the data format of the passed user does not match either a UUID (user primary key)</li><li> or a valid email address</li><li>or a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '404':
          description: The user does not exist
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER
      summary: Gets the presence status
      tags:
        - User Management
  /webhooks:
    delete:
      description: Unregisters all webHooks of the authenticated user
      operationId: removeWebHooks
      responses:
        '204':
          description: The operation was successful
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
            - READ_USER
      summary: Removes all webHooks
      tags:
        - Webhooks
    get:
      description: Gets the list of webHooks registered for this user or API.
      operationId: getWebHook
      responses:
        '200':
          description: The list of registered webHooks
          schema:
            items:
              $ref: '#/definitions/WebHook'
            type: array
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
            - READ_USER
      summary: Gets a list of webHooks
      tags:
        - Webhooks
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Registers the webHook with the given filter and callback URL.
      operationId: addWebHook
      parameters:
        - description: WebHook callback URL. Currently only HTTP is supported
          in: formData
          maxLength: 2048
          name: url
          required: true
          type: string
        - collectionFormat: multi
          description: 'A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE'
          in: formData
          items:
            enum:
              - CONVERSATION.CREATE
              - CONVERSATION.UPDATE
              - CONVERSATION.ADD_ITEM
              - CONVERSATION.UPDATE_ITEM
              - USER.INCOMING_CALL
              - USER.USER_UPDATED
              - USER.USER_SETTING_UPDATED
              - USER.SUBMIT_FORM_DATA
            maxLength: 2048
            type: string
          name: filter
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '201':
          description: The webHook was successfully registered
          schema:
            $ref: '#/definitions/WebHook'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>an invalid URL</li><li>an invalid event filter</li><li>an unsupported event filter</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '403':
          description: The maximum number of allowed webHook is reached
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
            - READ_USER
      summary: Registers a WebHook
      tags:
        - Webhooks
  '/webhooks/incoming/create/{conversationId}':
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Create a new webhook. Conversation must exist and creater has to be participant.
      operationId: createIncomingWebhook
      parameters:
        - description: The id of the conversation.
          in: path
          maxLength: 2048
          name: conversationId
          required: true
          type: string
        - description: The name of the webhook
          in: query
          maxLength: 2048
          name: name
          required: false
          type: string
        - description: not available
          in: query
          maxLength: 2048
          name: userId
          required: false
          type: string
        - description: A short description of the webhook
          in: query
          maxLength: 2048
          name: description
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The created webhook object as JSON string.
          schema:
            $ref: '#/definitions/IncomingWebhook'
        '400':
          description: Could not create webhook.
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - MANAGE_CONVERSATIONS
      summary: Create a new webhook for existing conversation.
      tags:
        - Incoming Webhooks
  '/webhooks/incoming/user/{userId}':
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Get all webhooks of a special user.
      operationId: getIncomingWebhookByUser
      parameters:
        - description: The id of the user.
          in: path
          maxLength: 2048
          name: userId
          required: true
          type: string
        - default: 25
          description: Max number of hooks per request. Default is 25
          format: int32
          in: query
          maximum: 100
          minimum: 1
          name: pagesize
          required: false
          type: number
        - description: Start of search if consequtive call.
          in: query
          maxLength: 2048
          name: searchpointer
          required: false
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Result successful
          schema:
            items:
              $ref: '#/definitions/IncomingWebhook'
            type: array
        '400':
          description: The request cannot be fulfilled due to bad syntax
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - MANAGE_CONVERSATIONS
      summary: Get all webhooks of a special user.
      tags:
        - Incoming Webhooks
  '/webhooks/incoming/{webhookId}':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: Delete a new webhook. Webhook must exist
      operationId: deleteIncomingWebhook
      parameters:
        - description: The id of the webhook
          in: path
          maxLength: 2048
          name: webhookId
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The webhook was deleted
        '401':
          description: The authentication was not successful
        '404':
          description: Could not find webhook
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - MANAGE_CONVERSATIONS
      summary: Delete an existing webhook
      tags:
        - Incoming Webhooks
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Post text items to conversations via slack apps.
      operationId: postWebhookAsSlackMessage
      parameters:
        - description: The id of the webhook.
          in: path
          maxLength: 2048
          name: webhookId
          required: true
          type: string
        - description: Attached JSON object in slack format.
          in: body
          name: content
          required: true
          schema:
            type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Message was posted to conversation
        '400':
          description: The request cannot be fulfilled due to bad syntax
        '401':
          description: The authentication was not successful
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      summary: Post text item for conversation via webhook.
      tags:
        - Incoming Webhooks
  /webhooks/presence:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Registers a webHook that has a presence filter with the given URL and userIds. There is a maximum number of userIds allowed
      operationId: addPresenceWebHook
      parameters:
        - description: WebHook callback URL. Currently only HTTP is supported
          in: formData
          maxLength: 2048
          name: url
          required: true
          type: string
        - collectionFormat: multi
          description: not available
          in: formData
          items:
            maxLength: 6500
            type: string
          name: userIds
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '201':
          description: The webHook was successfully registered
          schema:
            $ref: '#/definitions/WebHook'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>an invalid URL</li><li>one or more invalid userIds</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '403':
          description: The maximum number of allowed userIds is reached or the maximum number of allowed webHook is reached
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER
      summary: Registers Presence WebHook registration
      tags:
        - Webhooks
  '/webhooks/presence/{id}':
    put:
      consumes:
        - application/x-www-form-urlencoded
      description: 'Updates a registration of a webHook that has a presence filter. The update can be performed either on the URL and/or the userIds. The new userIds, if any, will override any existing userIds.'
      operationId: updatePresenceWebHook
      parameters:
        - description: The unique ID of the webHook to update
          in: path
          maxLength: 2048
          name: id
          required: true
          type: string
        - description: WebHook callback URL. Currently only HTTP is supported
          in: formData
          maxLength: 2048
          name: url
          required: false
          type: string
        - collectionFormat: multi
          description: The IDs of the users to subscribe for their presence
          in: formData
          items:
            maxLength: 6500
            type: string
          name: userIds
          required: false
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The webHook registration was successfully updated
          schema:
            $ref: '#/definitions/WebHook'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>an invalid URL</li><li>one or more invalid userIds</li><li>no input parameter is provided</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '403':
          description: The maximum number of allowed userIds is reached
        '404':
          description: The webHook does not exist
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_USER
      summary: Updates a Presence WebHook registration
      tags:
        - Webhooks
  '/webhooks/{id}':
    delete:
      consumes:
        - application/x-www-form-urlencoded
      description: Unregisters the webHook with the given ID.
      operationId: removeWebHook
      parameters:
        - description: The unique ID of the webHook to remove
          in: path
          maxLength: 2048
          name: id
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '204':
          description: The operation was successful
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the data format of the given id does not match a UUID</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '404':
          description: The webHook does not exist
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
            - READ_USER
      summary: Removes a registered webHook
      tags:
        - Webhooks
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: Gets the registered webHook with the given ID.
      operationId: getWebHookById
      parameters:
        - description: The unique ID of the webHook to fetch
          in: path
          maxLength: 2048
          name: id
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The registered webHook with the given ID
          schema:
            $ref: '#/definitions/WebHook'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>the data format of the given id does not match a UUID</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '404':
          description: The webHook does not exist
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
            - READ_USER
      summary: Gets a webHook
      tags:
        - Webhooks
    put:
      consumes:
        - application/x-www-form-urlencoded
      description: Updates a webHook registration with the given filter and callback URL.
      operationId: updateWebHook
      parameters:
        - description: The unique ID of the webHook to update
          in: path
          maxLength: 2048
          name: id
          required: true
          type: string
        - description: WebHook callback URL. Currently only HTTP is supported
          in: formData
          maxLength: 2048
          name: url
          required: false
          type: string
        - collectionFormat: multi
          description: 'A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE'
          in: formData
          items:
            enum:
              - CONVERSATION.CREATE
              - CONVERSATION.UPDATE
              - CONVERSATION.ADD_ITEM
              - CONVERSATION.UPDATE_ITEM
              - USER.USER_UPDATED
              - USER.USER_SETTING_UPDATED
            maxLength: 2048
            type: string
          name: filter
          required: false
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: The webHook registration was successfully updated
          schema:
            $ref: '#/definitions/WebHook'
        '400':
          description: 'The request cannot be fulfilled due to bad syntax: <ul><li>an invalid URL</li><li>an invalid event filter</li><li>an unsupported event filter</li><li>no input parameter is provided</li><li>a field constraint is violated</li></ul>'
        '401':
          description: The authentication was not successful
        '404':
          description: The webHook does not exist
        '500':
          description: The server encountered an internal error and the operation could not be completed.
        '503':
          description: The server is currently unable to receive requests.
      security:
        - oauth:
            - ALL
            - READ_CONVERSATIONS
            - READ_USER
      summary: Updates a WebHook registration
      tags:
        - Webhooks
definitions:
  Attachment:
    properties:
      creationTime:
        description: not available
        format: int64
        type: number
      creatorId:
        description: not available
        type: string
      deleteUrl:
        description: not available
        type: string
      fileId:
        description: not available
        type: string
      fileName:
        description: not available
        type: string
      itemId:
        description: not available
        type: string
      mimeType:
        description: not available
        type: string
      modificationTime:
        description: not available
        format: int64
        type: number
      size:
        description: not available
        format: int64
        type: number
      url:
        description: not available
        type: string
  BridgeNumber:
    properties:
      bridgeNumber:
        description: The number that has to be called to join the real time session of a conversation
        type: string
      country:
        description: The country where the bridge is hosted
        type: string
      locale:
        description: The locale of the bridge
        type: string
      name:
        description: The name / identifier of the bridge
        type: string
      type:
        description: 'Information of the billing for the call, i.e. if the caller has to pay or not for the call'
        type: string
  Conversation:
    properties:
      avatar:
        description: The URL of the small avatar image of the conversation
        type: string
      avatarLarge:
        description: The URL of the large avatar image of the conversation
        type: string
      convId:
        description: The ID of the conversation
        type: string
      creationTime:
        description: UTC timestamp when the conversation was created
        format: int64
        type: number
      creatorId:
        description: The ID of the user who created the conversation
        type: string
      creatorTenantId:
        description: The ID of the Circuit domain (tenant) where the creator of the conversation belongs to
        type: string
      description:
        description: The description of the conversation. This field is available only for conversations with type COMMUNITY
        type: string
      isGuestAccessDisabled:
        description: Indicates whether guest access to the conversation is disabled or not
        type: boolean
      isModerated:
        description: Indicates whether the conversation is moderated or not. In a moderated conversation only participants who have been assigned the role of a moderator are allowed to add or remove participants into the conversation
        type: boolean
      modificationTime:
        description: UTC timestamp when the conversation was modified. A conversation is modified when any of the conversation object fields change but not when conversation items are added or edited
        format: int64
        type: number
      participants:
        description: Array of active participants
        items:
          type: string
        type: array
      topic:
        description: The title of the conversation. Conversations of type DIRECT cannot have a title
        type: string
      topicPlaceholder:
        description: The title of the conversation. Conversations of type DIRECT cannot have a title
        type: string
      type:
        description: 'The type of the conversation. It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE'
        type: string
  ConversationDetails:
    properties:
      bridgeNumbers:
        description: A list of bridge numbers which can be used to dial in to the real time session via phone
        items:
          $ref: '#/definitions/BridgeNumber'
        type: array
      conversationCreatorId:
        description: The user ID of the conversation creator
        type: string
      isModerationAllowed:
        description: Indicates if the conversation is allowed to be moderated
        type: boolean
      isRecordingAllowed:
        description: Indicates if the conversation is allowed to be recorded
        type: boolean
      link:
        description: A link that can be used in a browser to join the session
        type: string
      pin:
        description: The PIN to join a real time session via phone
        type: string
  ConversationItem:
    properties:
      attachments:
        description: Array of files attached to the item
        items:
          $ref: '#/definitions/Attachment'
        type: array
      convId:
        description: The ID of the conversation the item belongs to
        type: string
      creationTime:
        description: UTC timestamp when the item was created
        format: int64
        type: number
      creatorId:
        description: The ID of the user who created the conversation item
        type: string
      includeInUnreadCount:
        description: Indicates whether the item is included in the unread message count
        type: boolean
      itemId:
        description: The ID of the item
        type: string
      modificationTime:
        description: UTC timestamp when the conversation was modified
        format: int64
        type: number
      rtc:
        $ref: '#/definitions/RtcItem'
      system:
        $ref: '#/definitions/SystemItem'
      text:
        $ref: '#/definitions/ConversationTextItem'
      type:
        description: 'The type of the conversation item. It can be one of the following TEXT, SYSTEM or RTC'
        type: string
  ConversationParticipant:
    properties:
      displayName:
        description: not available
        type: string
      firstName:
        description: not available
        type: string
      isDeleted:
        description: not available
        type: boolean
      largeImageUri:
        description: not available
        type: string
      lastName:
        description: not available
        type: string
      smallImageUri:
        description: not available
        type: string
      type:
        description: not available
        type: string
      userId:
        description: not available
        type: string
  ConversationParticipantsList:
    properties:
      hasMore:
        description: not available
        type: boolean
      participantList:
        description: not available
        items:
          $ref: '#/definitions/ConversationParticipant'
        type: array
      searchPointer:
        description: not available
        type: string
  ConversationSearchResult:
    properties:
      matchingConversations:
        description: A list of result items for conversations that match the search term.
        items:
          $ref: '#/definitions/ConversationSearchResultItem'
        type: array
  ConversationSearchResultItem:
    properties:
      convId:
        description: The ID of the conversation to which the matching items belong.
        type: string
      itemIds:
        description: The conversation items which contain the search result. The list maybe empty in case a hit was found for the conversation related data like topic or participants.
        items:
          type: string
        type: array
  ConversationTextItem:
    properties:
      content:
        description: The content of the text item
        type: string
      contentType:
        description: 'The type of the text item. It can be one of the following: RICH (with HTML content) or PLAIN (only text)'
        type: string
      formMetaData:
        description: not available
        type: string
      isWebhookMessage:
        description: not available
        type: boolean
      likedUserIds:
        description: Array of IDs of the users who liked the item
        items:
          type: string
        type: array
      parentId:
        description: The ID of the parent item of the text item. This field is optional and can be used for thread views
        type: string
      preview:
        $ref: '#/definitions/Preview'
      state:
        description: 'The state of the text item. It can be one of the following: CREATED (which denotes that it was not modified since its creation), EDITED (which denotes that the creator of this item modified the item) or DELETED (which denotes that the item itself exists but its content was removed)'
        type: string
      subject:
        description: TThe subject of the text item. This field is optional and maybe filled when creating the text item
        type: string
  IncomingWebhook:
    properties:
      conversationId:
        description: The conversation where the posts go to
        type: string
      creationTime:
        description: Milliseconds since 1.1.1900 when the hook was created
        format: int64
        type: number
      creatorId:
        description: Th e user who created the webhook
        type: string
      description:
        description: A short plain text to describe the webhook
        type: string
      modificationTime:
        description: not available
        format: int64
        type: number
      name:
        description: A name to identify the webhook
        type: string
      status:
        description: Status may be ENABLED or DISABLED. A disabled hook cannot be used
        type: string
      tenantId:
        description: The tenant where the conversation and users belong to
        type: string
      url:
        description: The url where the webhokk can be used
        type: string
      userId:
        description: The user who will occur as author of the posts
        type: string
      webhookId:
        description: Unique id of the webhook
        type: string
  Label:
    properties:
      labelId:
        description: The unique ID of the label
        type: string
      value:
        description: The clear text value
        type: string
  OAuthClientId:
    properties:
      accessTokenURL:
        description: The URL to fetch the access token for an authorization code
        type: string
      applicationName:
        description: A free text identifier of the application that uses the client ID
        type: string
      authorizationURL:
        description: The URL to redirect a user for Circuit authentication
        type: string
      clientId:
        description: The client ID
        type: string
      domains:
        description: The valid domains for the client ID
        items:
          type: string
        type: array
      grantTypes:
        description: A list of grant types which are supported by this client ID
        items:
          type: string
        type: array
      scopes:
        description: The available scopes for OAUTH 2.0 access
        items:
          type: string
        type: array
      ttl:
        description: The TTL for a token generated with this client ID
        type: string
      userId:
        description: The ID of the user who owns a token
        type: string
  Presence:
    properties:
      dndUntil:
        description: Timestamp until the DND state of the user is active
        format: int64
        type: number
      isOptedOut:
        description: Indicates whether the user has opted out of their presence
        type: boolean
      latitude:
        description: The latitude of the geo location of the user
        format: float
        type: number
      locationText:
        description: The geo location of the user in clear text
        type: string
      longitude:
        description: The longitude of the geo location of the user
        format: float
        type: number
      mobile:
        description: Identifies whether the presence state is based on the state information of a mobile device or not
        type: boolean
      poor:
        description: n/a
        type: boolean
      state:
        description: 'The presence state of the user. It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)'
        type: string
      statusMessage:
        description: A free formed status message of the user
        type: string
      timeZoneOffset:
        description: The timezone offset of the user compared to UTC
        format: int32
        type: number
      userId:
        description: The ID of the user
        type: string
  Preview:
    properties:
      imageURI:
        description: n/a
        type: string
      srcURL:
        description: n/a
        type: string
      title:
        description: n/a
        type: string
      type:
        description: n/a
        type: string
  RtcItem:
    properties:
      missed:
        description: Indicates a missed call
        type: string
      type:
        description: The type of the RTC item
        type: string
  String:
    properties:
      CASE_INSENSITIVE_ORDER: {}
  SystemItem:
    properties:
      affectedParticipants:
        description: not available
        items:
          type: string
        type: array
      newTopic:
        description: not available
        type: string
      oldTopic:
        description: not available
        type: string
      type:
        description: The type of the system item
        type: string
  User:
    properties:
      avatar:
        description: The URL of the small avatar picture.
        type: string
      avatarLarge:
        description: not available
        type: string
      company:
        description: The name of the user's company
        type: string
      displayName:
        description: The user's display name
        type: string
      emailAddress:
        description: The primary email address of the user
        type: string
      emailAddresses:
        description: additional email addresses of the user
        items:
          $ref: '#/definitions/UserEmailAddress'
        type: array
      firstName:
        description: The first name of the user
        type: string
      jobTitle:
        description: The job title of the user
        type: string
      lastName:
        description: The last name of the user
        type: string
      locale:
        description: 'The locale of the user. (E.g. en-US, de-DE)'
        type: string
      phoneNumber:
        description: provisioned phone number of the user
        type: string
      phoneNumbers:
        description: additional phone numbers of the user
        items:
          $ref: '#/definitions/UserPhoneNumber'
        type: array
      userId:
        description: The ID of the user
        type: string
      userType:
        description: the type of the user
        type: string
  UserEmailAddress:
    properties:
      address:
        description: the email address
        type: string
      type:
        description: the type of the email address
        type: string
  UserPhoneNumber:
    properties:
      phoneNumber:
        description: the phone number
        type: string
      type:
        description: the type of the phone number
        type: string
  ValidateAccessToken:
    properties:
      accessToken:
        description: The access token issued by the authorization server
        type: string
      clientId:
        description: The client ID used to generate the access token
        type: string
      expirationTime:
        description: The date when the token expires
        format: int64
        type: number
      scopes:
        description: Array of the scopes of the access token
        items:
          type: string
        type: array
  WebHook:
    properties:
      creationTime:
        description: The time when this WebHook was created. This does not necessary mean the time when an manifest file was created.
        format: int64
        type: number
      filter:
        description: An optional list of filter parameters for this webhook.
        items:
          type: string
        type: array
      id:
        description: The unique identifier for this webhook. Can be used later to unregister the webhook.
        type: string
      subscriptionIds:
        description: 'The optional list of userids for which this webhook is subscribed, i.e. presence events for the user are forwarded to the WebHook callback URL.'
        items:
          type: string
        type: array
      type:
        description: 'The type of a WebHook. This can either be MANUAL or EXTENSION. While manual WebHooks are only temporary and for development only use, permanent ones (EXTENSION) will bemanaged by the system.'
        type: string
      url:
        description: The callback URL of this webhook.
        type: string
      userId:
        description: 'The user ID for which this webhook is subscribed, i.e. events for this user are forwarded to the WebHook callback URL.'
        type: string
