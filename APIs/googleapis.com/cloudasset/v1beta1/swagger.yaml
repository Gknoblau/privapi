swagger: '2.0'
schemes:
  - https
host: cloudasset.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: The cloud asset API manages the history and inventory of cloud resources.
  title: Cloud Asset
  version: v1beta1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.7.18
      format: google
      url: 'https://cloudasset.googleapis.com/$discovery/rest?version=v1beta1'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: cloudasset
externalDocs:
  url: 'https://console.cloud.google.com/apis/api/cloudasset.googleapis.com/overview'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: folders
  - name: organizations
  - name: projects
paths:
  '/v1beta1/{name}':
    get:
      description: |-
        Gets the latest state of a long-running operation.  Clients can use this
        method to poll the operation result at intervals as recommended by the API
        service.
      operationId: cloudasset.folders.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - folders
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v1beta1/{parent}:batchGetAssetsHistory':
    get:
      description: |-
        Batch gets the update history of assets that overlap a time window.
        For RESOURCE content, this API outputs history with asset in both
        non-delete or deleted status.
        For IAM_POLICY content, this API outputs history when the asset and its
        attached IAM POLICY both exist. This can create gaps in the output history.
        If a specified asset does not exist, this API returns an INVALID_ARGUMENT
        error.
      operationId: cloudasset.organizations.batchGetAssetsHistory
      parameters:
        - collectionFormat: multi
          description: |-
            A list of the full names of the assets. For example:
            `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
            See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
            for more info.

            The request becomes a no-op if the asset name list is empty, and the max
            size of the asset name list is 100 in one request.
          in: query
          items:
            type: string
          name: assetNames
          type: array
        - description: Required. The content type.
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - RESOURCE
            - IAM_POLICY
          in: query
          name: contentType
          type: string
        - description: |-
            Required. The relative name of the root asset. It can only be an
            organization number (such as "organizations/123"), a project ID (such as
            "projects/my-project-id")", or a project number (such as "projects/12345").
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            End time of the time window (inclusive).
            Current timestamp if not specified.
          in: query
          name: readTimeWindow.endTime
          type: string
        - description: Start time of the time window (exclusive).
          in: query
          name: readTimeWindow.startTime
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchGetAssetsHistoryResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - organizations
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v1beta1/{parent}:exportAssets':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Exports assets with time and resource types to a given Cloud Storage
        location. The output format is newline-delimited JSON.
        This API implements the google.longrunning.Operation API allowing you
        to keep track of the export.
      operationId: cloudasset.folders.exportAssets
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ExportAssetsRequest'
        - description: |-
            Required. The relative name of the root asset. This can only be an
            organization number (such as "organizations/123"), a project ID (such as
            "projects/my-project-id"), a project number (such as "projects/12345"), or
            a folder number (such as "folders/123").
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - folders
definitions:
  Asset:
    description: |-
      Cloud asset. This includes all Google Cloud Platform resources,
      Cloud IAM policies, and other non-GCP assets.
    properties:
      assetType:
        description: 'Type of the asset. Example: "google.compute.Disk".'
        type: string
      iamPolicy:
        $ref: '#/definitions/Policy'
        description: |-
          Representation of the actual Cloud IAM policy set on a cloud resource. For each
          resource, there must be at most one Cloud IAM policy set on it.
      name:
        description: |-
          The full name of the asset. For example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
          See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
          for more information.
        type: string
      resource:
        $ref: '#/definitions/Resource'
        description: Representation of the resource.
    type: object
  AuditConfig:
    description: |-
      Specifies the audit configuration for a service.
      The configuration determines which permission types are logged, and what
      identities, if any, are exempted from logging.
      An AuditConfig must have one or more AuditLogConfigs.

      If there are AuditConfigs for both `allServices` and a specific service,
      the union of the two AuditConfigs is used for that service: the log_types
      specified in each AuditConfig are enabled, and the exempted_members in each
      AuditLogConfig are exempted.

      Example Policy with multiple AuditConfigs:

          {
            "audit_configs": [
              {
                "service": "allServices"
                "audit_log_configs": [
                  {
                    "log_type": "DATA_READ",
                    "exempted_members": [
                      "user:foo@gmail.com"
                    ]
                  },
                  {
                    "log_type": "DATA_WRITE",
                  },
                  {
                    "log_type": "ADMIN_READ",
                  }
                ]
              },
              {
                "service": "fooservice.googleapis.com"
                "audit_log_configs": [
                  {
                    "log_type": "DATA_READ",
                  },
                  {
                    "log_type": "DATA_WRITE",
                    "exempted_members": [
                      "user:bar@gmail.com"
                    ]
                  }
                ]
              }
            ]
          }

      For fooservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
      logging. It also exempts foo@gmail.com from DATA_READ logging, and
      bar@gmail.com from DATA_WRITE logging.
    properties:
      auditLogConfigs:
        description: The configuration for logging of each type of permission.
        items:
          $ref: '#/definitions/AuditLogConfig'
        type: array
      service:
        description: |-
          Specifies a service that will be enabled for audit logging.
          For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
          `allServices` is a special value that covers all services.
        type: string
    type: object
  AuditLogConfig:
    description: |-
      Provides the configuration for logging a type of permissions.
      Example:

          {
            "audit_log_configs": [
              {
                "log_type": "DATA_READ",
                "exempted_members": [
                  "user:foo@gmail.com"
                ]
              },
              {
                "log_type": "DATA_WRITE",
              }
            ]
          }

      This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
      foo@gmail.com from DATA_READ logging.
    properties:
      exemptedMembers:
        description: |-
          Specifies the identities that do not cause logging for this type of
          permission.
          Follows the same format of Binding.members.
        items:
          type: string
        type: array
      logType:
        description: The log type that this config enables.
        enum:
          - LOG_TYPE_UNSPECIFIED
          - ADMIN_READ
          - DATA_WRITE
          - DATA_READ
        type: string
    type: object
  BatchGetAssetsHistoryResponse:
    description: Batch get assets history response.
    properties:
      assets:
        description: A list of assets with valid time windows.
        items:
          $ref: '#/definitions/TemporalAsset'
        type: array
    type: object
  Binding:
    description: Associates `members` with a `role`.
    properties:
      condition:
        $ref: '#/definitions/Expr'
        description: |-
          Unimplemented. The condition that is associated with this binding.
          NOTE: an unsatisfied condition will not allow user access via current
          binding. Different bindings, including their conditions, are examined
          independently.
      members:
        description: |+
          Specifies the identities requesting access for a Cloud Platform resource.
          `members` can have the following values:

          * `allUsers`: A special identifier that represents anyone who is
             on the internet; with or without a Google account.

          * `allAuthenticatedUsers`: A special identifier that represents anyone
             who is authenticated with a Google account or a service account.

          * `user:{emailid}`: An email address that represents a specific Google
             account. For example, `alice@gmail.com` .


          * `serviceAccount:{emailid}`: An email address that represents a service
             account. For example, `my-other-app@appspot.gserviceaccount.com`.

          * `group:{emailid}`: An email address that represents a Google group.
             For example, `admins@example.com`.


          * `domain:{domain}`: A Google Apps domain name that represents all the
             users of that domain. For example, `google.com` or `example.com`.

        items:
          type: string
        type: array
      role:
        description: |-
          Role that is assigned to `members`.
          For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        type: string
    type: object
  ExportAssetsRequest:
    description: Export asset request.
    properties:
      assetTypes:
        description: |-
          A list of asset types of which to take a snapshot for. For example:
          "google.compute.Disk". If specified, only matching assets will be returned.
          See [Introduction to Cloud Asset
          Inventory](https://cloud.google.com/resource-manager/docs/cloud-asset-inventory/overview)
          for all supported asset types.
        items:
          type: string
        type: array
      contentType:
        description: |-
          Asset content type. If not specified, no content but the asset name will be
          returned.
        enum:
          - CONTENT_TYPE_UNSPECIFIED
          - RESOURCE
          - IAM_POLICY
        type: string
      outputConfig:
        $ref: '#/definitions/OutputConfig'
        description: |-
          Required. Output configuration indicating where the results will be output
          to. All results will be in newline delimited JSON format.
      readTime:
        description: |-
          Timestamp to take an asset snapshot. This can only be set to a timestamp
          between 2018-10-02 UTC (inclusive) and the current time. If not specified,
          the current time will be used. Due to delays in resource data collection
          and indexing, there is a volatile window during which running the same
          query may get different results.
        format: google-datetime
        type: string
    type: object
  Expr:
    description: |-
      Represents an expression text. Example:

          title: "User account presence"
          description: "Determines whether the request has a user account"
          expression: "size(request.user) > 0"
    properties:
      description:
        description: |-
          An optional description of the expression. This is a longer text which
          describes the expression, e.g. when hovered over it in a UI.
        type: string
      expression:
        description: |-
          Textual representation of an expression in
          Common Expression Language syntax.

          The application context of the containing message determines which
          well-known feature set of CEL is supported.
        type: string
      location:
        description: |-
          An optional string indicating the location of the expression for error
          reporting, e.g. a file name and a position in the file.
        type: string
      title:
        description: |-
          An optional title for the expression, i.e. a short string describing
          its purpose. This can be used e.g. in UIs which allow to enter the
          expression.
        type: string
    type: object
  GcsDestination:
    description: A Cloud Storage location.
    properties:
      uri:
        description: |-
          The uri of the Cloud Storage object. It's the same uri that is used by
          gsutil. For example: "gs://bucket_name/object_name". See [Viewing and
          Editing Object
          Metadata](https://cloud.google.com/storage/docs/viewing-editing-metadata)
          for more information.
        type: string
    type: object
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
      error:
        $ref: '#/definitions/Status'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        type: object
      name:
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should have the format of `operations/some/unique/name`.
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        type: object
    type: object
  OutputConfig:
    description: Output configuration for export assets destination.
    properties:
      gcsDestination:
        $ref: '#/definitions/GcsDestination'
        description: Destination on Cloud Storage.
    type: object
  Policy:
    description: |-
      Defines an Identity and Access Management (IAM) policy. It is used to
      specify access control policies for Cloud Platform resources.


      A `Policy` consists of a list of `bindings`. A `binding` binds a list of
      `members` to a `role`, where the members can be user accounts, Google groups,
      Google domains, and service accounts. A `role` is a named list of permissions
      defined by IAM.

      **JSON Example**

          {
            "bindings": [
              {
                "role": "roles/owner",
                "members": [
                  "user:mike@example.com",
                  "group:admins@example.com",
                  "domain:google.com",
                  "serviceAccount:my-other-app@appspot.gserviceaccount.com"
                ]
              },
              {
                "role": "roles/viewer",
                "members": ["user:sean@example.com"]
              }
            ]
          }

      **YAML Example**

          bindings:
          - members:
            - user:mike@example.com
            - group:admins@example.com
            - domain:google.com
            - serviceAccount:my-other-app@appspot.gserviceaccount.com
            role: roles/owner
          - members:
            - user:sean@example.com
            role: roles/viewer


      For a description of IAM and its features, see the
      [IAM developer's guide](https://cloud.google.com/iam/docs).
    properties:
      auditConfigs:
        description: Specifies cloud audit logging configuration for this policy.
        items:
          $ref: '#/definitions/AuditConfig'
        type: array
      bindings:
        description: |-
          Associates a list of `members` to a `role`.
          `bindings` with no members will result in an error.
        items:
          $ref: '#/definitions/Binding'
        type: array
      etag:
        description: |-
          `etag` is used for optimistic concurrency control as a way to help
          prevent simultaneous updates of a policy from overwriting each other.
          It is strongly suggested that systems make use of the `etag` in the
          read-modify-write cycle to perform policy updates in order to avoid race
          conditions: An `etag` is returned in the response to `getIamPolicy`, and
          systems are expected to put that etag in the request to `setIamPolicy` to
          ensure that their change will be applied to the same version of the policy.

          If no `etag` is provided in the call to `setIamPolicy`, then the existing
          policy is overwritten blindly.
        format: byte
        type: string
      version:
        description: Deprecated.
        format: int32
        type: integer
    type: object
  Resource:
    description: Representation of a cloud resource.
    properties:
      data:
        additionalProperties:
          description: Properties of the object.
        description: |-
          The content of the resource, in which some sensitive fields are scrubbed
          away and may not be present.
        type: object
      discoveryDocumentUri:
        description: |-
          The URL of the discovery document containing the resource's JSON schema.
          For example:
          `"https://www.googleapis.com/discovery/v1/apis/compute/v1/rest"`.
          It will be left unspecified for resources without a discovery-based API,
          such as Cloud Bigtable.
        type: string
      discoveryName:
        description: |-
          The JSON schema name listed in the discovery document.
          Example: "Project". It will be left unspecified for resources (such as
          Cloud Bigtable) without a discovery-based API.
        type: string
      parent:
        description: |-
          The full name of the immediate parent of this resource. See
          [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
          for more information.

          For GCP assets, it is the parent resource defined in the [Cloud IAM policy
          hierarchy](https://cloud.google.com/iam/docs/overview#policy_hierarchy).
          For example: `"//cloudresourcemanager.googleapis.com/projects/my_project_123"`.

          For third-party assets, it is up to the users to define.
        type: string
      resourceUrl:
        description: |-
          The REST URL for accessing the resource. An HTTP GET operation using this
          URL returns the resource itself.
          Example:
          `https://cloudresourcemanager.googleapis.com/v1/projects/my-project-123`.
          It will be left unspecified for resources without a REST API.
        type: string
      version:
        description: 'The API version. Example: "v1".'
        type: string
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  TemporalAsset:
    description: |-
      Temporal asset. In addition to the asset, the temporal asset includes the
      status of the asset and valid from and to time of it.
    properties:
      asset:
        $ref: '#/definitions/Asset'
        description: Asset.
      deleted:
        description: If the asset is deleted or not.
        type: boolean
      window:
        $ref: '#/definitions/TimeWindow'
        description: The time window when the asset data and state was observed.
    type: object
  TimeWindow:
    description: 'A time window of (start_time, end_time].'
    properties:
      endTime:
        description: |-
          End time of the time window (inclusive).
          Current timestamp if not specified.
        format: google-datetime
        type: string
      startTime:
        description: Start time of the time window (exclusive).
        format: google-datetime
        type: string
    type: object
