swagger: '2.0'
info:
  version: '2018-11-29'
  x-release: v4
  title: AmazonApiGatewayV2
  description: Amazon API Gateway V2
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: apigatewayv2
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigatewayv2-2018-11-29.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/apigateway/'
host: apigateway.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: query
    type: string
    required: true
  Version:
    name: Version
    in: query
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /v2/apis:
    post:
      operationId: CreateApi
      description: Creates an Api resource.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateApiRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApis
      description: Gets a collection of Api resources.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApisResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetApisRequest'
  '/v2/domainnames/{domainName}/apimappings':
    post:
      operationId: CreateApiMapping
      description: Creates an API mapping.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateApiMappingRequest'
        - name: domainName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiMappings
      description: The API mappings.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiMappingsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetApiMappingsRequest'
        - name: domainName
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/authorizers':
    post:
      operationId: CreateAuthorizer
      description: Creates an Authorizer for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateAuthorizerRequest'
        - name: apiId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizers
      description: Gets the Authorizers for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetAuthorizersResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetAuthorizersRequest'
        - name: apiId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/deployments':
    post:
      operationId: CreateDeployment
      description: Creates a Deployment for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateDeploymentRequest'
        - name: apiId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployments
      description: Gets the Deployments for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDeploymentsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDeploymentsRequest'
        - name: apiId
          type: string
          in: path
          required: true
  /v2/domainnames:
    post:
      operationId: CreateDomainName
      description: Creates a domain name.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateDomainNameRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainNames
      description: Gets the domain names for an AWS account.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDomainNamesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDomainNamesRequest'
  '/v2/apis/{apiId}/integrations':
    post:
      operationId: CreateIntegration
      description: Creates an Integration.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateIntegrationResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateIntegrationRequest'
        - name: apiId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrations
      description: Gets the Integrations for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetIntegrationsRequest'
        - name: apiId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses':
    post:
      operationId: CreateIntegrationResponse
      description: Creates an IntegrationResponses.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateIntegrationResponseRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: integrationId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponses
      description: Gets the IntegrationResponses for an Integration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResponsesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetIntegrationResponsesRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: integrationId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/models':
    post:
      operationId: CreateModel
      description: Creates a Model for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateModelRequest'
        - name: apiId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModels
      description: Gets the Models for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetModelsRequest'
        - name: apiId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/routes':
    post:
      operationId: CreateRoute
      description: Creates a Route for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateRouteRequest'
        - name: apiId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRoutes
      description: Gets the Routes for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRoutesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetRoutesRequest'
        - name: apiId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses':
    post:
      operationId: CreateRouteResponse
      description: Creates a RouteResponse for a Route.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateRouteResponseRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: routeId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRouteResponses
      description: Gets the RouteResponses for a Route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResponsesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetRouteResponsesRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: routeId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/stages':
    post:
      operationId: CreateStage
      description: Creates a Stage for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateStageRequest'
        - name: apiId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStages
      description: Gets the Stages for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetStagesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetStagesRequest'
        - name: apiId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}':
    delete:
      operationId: DeleteApi
      description: Deletes an Api resource.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteApiRequest'
        - name: apiId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApi
      description: Gets an Api resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetApiRequest'
        - name: apiId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateApi
      description: Updates an Api resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateApiRequest'
        - name: apiId
          type: string
          in: path
          required: true
  '/v2/domainnames/{domainName}/apimappings/{apiMappingId}':
    delete:
      operationId: DeleteApiMapping
      description: Deletes an API mapping.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteApiMappingRequest'
        - name: domainName
          type: string
          in: path
          required: true
        - name: apiMappingId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiMapping
      description: The API mapping.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetApiMappingRequest'
        - name: domainName
          type: string
          in: path
          required: true
        - name: apiMappingId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateApiMapping
      description: The API mapping.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateApiMappingRequest'
        - name: domainName
          type: string
          in: path
          required: true
        - name: apiMappingId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/authorizers/{authorizerId}':
    delete:
      operationId: DeleteAuthorizer
      description: Deletes an Authorizer.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteAuthorizerRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: authorizerId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizer
      description: Gets an Authorizer.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetAuthorizerRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: authorizerId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateAuthorizer
      description: Updates an Authorizer.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateAuthorizerRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: authorizerId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/deployments/{deploymentId}':
    delete:
      operationId: DeleteDeployment
      description: Deletes a Deployment.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteDeploymentRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: deploymentId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployment
      description: Gets a Deployment.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDeploymentRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: deploymentId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateDeployment
      description: Updates a Deployment.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDeploymentRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: deploymentId
          type: string
          in: path
          required: true
  '/v2/domainnames/{domainName}':
    delete:
      operationId: DeleteDomainName
      description: Deletes a domain name.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteDomainNameRequest'
        - name: domainName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainName
      description: Gets a domain name.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDomainNameRequest'
        - name: domainName
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateDomainName
      description: Updates a domain name.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDomainNameRequest'
        - name: domainName
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/integrations/{integrationId}':
    delete:
      operationId: DeleteIntegration
      description: Deletes an Integration.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteIntegrationRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: integrationId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegration
      description: Gets an Integration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetIntegrationRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: integrationId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateIntegration
      description: Updates an Integration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateIntegrationResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateIntegrationRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: integrationId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}':
    delete:
      operationId: DeleteIntegrationResponse
      description: Deletes an IntegrationResponses.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteIntegrationResponseRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: integrationId
          type: string
          in: path
          required: true
        - name: integrationResponseId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponse
      description: Gets an IntegrationResponses.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetIntegrationResponseRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: integrationId
          type: string
          in: path
          required: true
        - name: integrationResponseId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateIntegrationResponse
      description: Updates an IntegrationResponses.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateIntegrationResponseRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: integrationId
          type: string
          in: path
          required: true
        - name: integrationResponseId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/models/{modelId}':
    delete:
      operationId: DeleteModel
      description: Deletes a Model.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteModelRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: modelId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModel
      description: Gets a Model.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetModelRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: modelId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateModel
      description: Updates a Model.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateModelRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: modelId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/routes/{routeId}':
    delete:
      operationId: DeleteRoute
      description: Deletes a Route.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteRouteRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: routeId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRoute
      description: Gets a Route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetRouteRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: routeId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateRoute
      description: Updates a Route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRouteRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: routeId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}':
    delete:
      operationId: DeleteRouteResponse
      description: Deletes a RouteResponse.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteRouteResponseRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: routeId
          type: string
          in: path
          required: true
        - name: routeResponseId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRouteResponse
      description: Gets a RouteResponse.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetRouteResponseRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: routeId
          type: string
          in: path
          required: true
        - name: routeResponseId
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateRouteResponse
      description: Updates a RouteResponse.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRouteResponseRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: routeId
          type: string
          in: path
          required: true
        - name: routeResponseId
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/stages/{stageName}':
    delete:
      operationId: DeleteStage
      description: Deletes a Stage.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteStageRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: stageName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStage
      description: Gets a Stage.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetStageRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: stageName
          type: string
          in: path
          required: true
    patch:
      operationId: UpdateStage
      description: Updates a Stage.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateStageRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: stageName
          type: string
          in: path
          required: true
  '/v2/apis/{apiId}/models/{modelId}/template':
    get:
      operationId: GetModelTemplate
      description: Gets a model template.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelTemplateResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetModelTemplateRequest'
        - name: apiId
          type: string
          in: path
          required: true
        - name: modelId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  CreateApiResponse:
    type: object
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: HTTP or WEBSOCKET.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
  CreateApiRequest:
    type: object
    required:
      - RouteSelectionExpression
      - ProtocolType
      - Name
    properties:
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: HTTP or WEBSOCKET.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
  NotFoundException: {}
  TooManyRequestsException: {}
  BadRequestException: {}
  ConflictException: {}
  CreateApiMappingResponse:
    type: object
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  CreateApiMappingRequest:
    type: object
    required:
      - Stage
      - ApiId
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: ''
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  CreateAuthorizerResponse:
    type: object
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: 'The time to live (TTL), in seconds, of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. Currently the only valid value is REQUEST, for a Lambda function using incoming request parameters.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'The authorizer''s Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api} , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.'
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header and a Name query string parameters are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: 'For REQUEST authorizer, this is not defined.'
  CreateAuthorizerRequest:
    type: object
    required:
      - AuthorizerUri
      - AuthorizerType
      - IdentitySource
      - Name
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: 'The time to live (TTL), in seconds, of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. Currently the only valid value is REQUEST, for a Lambda function using incoming request parameters.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'The authorizer''s Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api} , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.'
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header and a Name query string parameters are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: 'For REQUEST authorizer, this is not defined.'
  CreateDeploymentResponse:
    type: object
    properties:
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
  CreateDeploymentRequest:
    type: object
    properties:
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment resource.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the Stage resource for the Deployment resource to create.
  CreateDomainNameResponse:
    type: object
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
  CreateDomainNameRequest:
    type: object
    required:
      - DomainName
    properties:
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The domain name.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
  CreateIntegrationResult:
    type: object
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The identifier of the VpcLink used for the integration when the connectionType is VPC_LINK; otherwise undefined.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: ''
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p><p> AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration.</p><p> AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p><p> HTTP: for integrating the route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration.</p><p> HTTP_PROXY: for integrating route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p><p> MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: '<p>Specifies the Uniform Resource Identifier (URI) of the integration endpoint.</p><p>For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">RFC-3986 specification</a>, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.</p><p>For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the URI can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</p>'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.</p><p> WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p><p> NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p><p> WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name} , where  {location}  is querystring, path, or header; and  {name}  must be a valid and unique method request parameter name.'
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
  CreateIntegrationRequest:
    type: object
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The identifier of the VpcLink used for the integration when the connectionType is VPC_LINK; otherwise undefined.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p><p> AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration.</p><p> AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p><p> HTTP: for integrating the route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration.</p><p> HTTP_PROXY: for integrating route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p><p> MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: '<p>Specifies the Uniform Resource Identifier (URI) of the integration endpoint.</p><p>For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">RFC-3986 specification</a>, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.</p><p>For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the URI can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</p>'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.</p><p> WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p><p> NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p><p> WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name} , where  {location}  is querystring, path, or header; and  {name}  must be a valid and unique method request parameter name.'
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
  CreateIntegrationResponseResponse:
    type: object
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
  CreateIntegrationResponseRequest:
    type: object
    required:
      - IntegrationResponseKey
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where {name} is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where {name} is a valid and unique response header name and {JSON-expression} is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration response.
  CreateModelResponse:
    type: object
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
  CreateModelRequest:
    type: object
    required:
      - Name
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
  CreateRouteResult:
    type: object
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: 'The authorization scopes supported by this route. '
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
  CreateRouteRequest:
    type: object
    required:
      - RouteKey
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for the route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: The authorization scopes supported by this route.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
  CreateRouteResponseResponse:
    type: object
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
  CreateRouteResponseRequest:
    type: object
    required:
      - RouteResponseKey
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: The response models for the route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: The route response parameters.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The route response key.
  CreateStageResponse:
    type: object
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier of the Deployment that the Stage is associated with.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&=,]+.'
  CreateStageRequest:
    type: object
    required:
      - StageName
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: The default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The deployment identifier of the API stage.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the API stage.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&=,]+.'
  DeleteApiRequest:
    type: object
    properties: {}
  DeleteApiMappingRequest:
    type: object
    properties: {}
  DeleteAuthorizerRequest:
    type: object
    properties: {}
  DeleteDeploymentRequest:
    type: object
    properties: {}
  DeleteDomainNameRequest:
    type: object
    properties: {}
  DeleteIntegrationRequest:
    type: object
    properties: {}
  DeleteIntegrationResponseRequest:
    type: object
    properties: {}
  DeleteModelRequest:
    type: object
    properties: {}
  DeleteRouteRequest:
    type: object
    properties: {}
  DeleteRouteResponseRequest:
    type: object
    properties: {}
  DeleteStageRequest:
    type: object
    properties: {}
  GetApiResponse:
    type: object
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: HTTP or WEBSOCKET.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
  GetApiRequest:
    type: object
    properties: {}
  GetApiMappingResponse:
    type: object
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  GetApiMappingRequest:
    type: object
    properties: {}
  GetApiMappingsResponse:
    type: object
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  GetApiMappingsRequest:
    type: object
    properties: {}
  GetApisResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfApi'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetApisRequest:
    type: object
    properties: {}
  GetAuthorizerResponse:
    type: object
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: 'The time to live (TTL), in seconds, of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. Currently the only valid value is REQUEST, for a Lambda function using incoming request parameters.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'The authorizer''s Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api} , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.'
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header and a Name query string parameters are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: 'For REQUEST authorizer, this is not defined.'
  GetAuthorizerRequest:
    type: object
    properties: {}
  GetAuthorizersResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfAuthorizer'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetAuthorizersRequest:
    type: object
    properties: {}
  GetDeploymentResponse:
    type: object
    properties:
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
  GetDeploymentRequest:
    type: object
    properties: {}
  GetDeploymentsResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfDeployment'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetDeploymentsRequest:
    type: object
    properties: {}
  GetDomainNameResponse:
    type: object
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
  GetDomainNameRequest:
    type: object
    properties: {}
  GetDomainNamesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfDomainName'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetDomainNamesRequest:
    type: object
    properties: {}
  GetIntegrationResult:
    type: object
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The identifier of the VpcLink used for the integration when the connectionType is VPC_LINK; otherwise undefined.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: ''
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p><p> AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration.</p><p> AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p><p> HTTP: for integrating the route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration.</p><p> HTTP_PROXY: for integrating route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p><p> MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: '<p>Specifies the Uniform Resource Identifier (URI) of the integration endpoint.</p><p>For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">RFC-3986 specification</a>, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.</p><p>For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the URI can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</p>'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.</p><p> WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p><p> NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p><p> WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name} , where  {location}  is querystring, path, or header; and  {name}  must be a valid and unique method request parameter name.'
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
  GetIntegrationRequest:
    type: object
    properties: {}
  GetIntegrationResponseResponse:
    type: object
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
  GetIntegrationResponseRequest:
    type: object
    properties: {}
  GetIntegrationResponsesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfIntegrationResponse'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetIntegrationResponsesRequest:
    type: object
    properties: {}
  GetIntegrationsResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfIntegration'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetIntegrationsRequest:
    type: object
    properties: {}
  GetModelResponse:
    type: object
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
  GetModelRequest:
    type: object
    properties: {}
  GetModelTemplateResponse:
    type: object
    properties:
      Value:
        $ref: '#/definitions/__string'
        description: The template value.
  GetModelTemplateRequest:
    type: object
    properties: {}
  GetModelsResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfModel'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetModelsRequest:
    type: object
    properties: {}
  GetRouteResult:
    type: object
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: 'The authorization scopes supported by this route. '
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
  GetRouteRequest:
    type: object
    properties: {}
  GetRouteResponseResponse:
    type: object
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
  GetRouteResponseRequest:
    type: object
    properties: {}
  GetRouteResponsesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfRouteResponse'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetRouteResponsesRequest:
    type: object
    properties: {}
  GetRoutesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfRoute'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetRoutesRequest:
    type: object
    properties: {}
  GetStageResponse:
    type: object
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier of the Deployment that the Stage is associated with.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&=,]+.'
  GetStageRequest:
    type: object
    properties: {}
  GetStagesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfStage'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetStagesRequest:
    type: object
    properties: {}
  UpdateApiResponse:
    type: object
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: HTTP or WEBSOCKET.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
  UpdateApiRequest:
    type: object
    properties:
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
  UpdateApiMappingResponse:
    type: object
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  UpdateApiMappingRequest:
    type: object
    required:
      - ApiId
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  UpdateAuthorizerResponse:
    type: object
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: 'The time to live (TTL), in seconds, of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. Currently the only valid value is REQUEST, for a Lambda function using incoming request parameters.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'The authorizer''s Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api} , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.'
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header and a Name query string parameters are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: 'For REQUEST authorizer, this is not defined.'
  UpdateAuthorizerRequest:
    type: object
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: 'The time to live (TTL), in seconds, of cached authorizer results. If it is zero, authorization caching is disabled. If it is greater than zero, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. Currently the only valid value is REQUEST, for a Lambda function using incoming request parameters.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'The authorizer''s Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api} , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.'
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: 'For REQUEST authorizer, this is not defined.'
  UpdateDeploymentResponse:
    type: object
    properties:
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
  UpdateDeploymentRequest:
    type: object
    properties:
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment resource.
  UpdateDomainNameResponse:
    type: object
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
  UpdateDomainNameRequest:
    type: object
    properties:
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
  UpdateIntegrationResult:
    type: object
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The identifier of the VpcLink used for the integration when the connectionType is VPC_LINK; otherwise undefined.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: ''
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p><p> AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration.</p><p> AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p><p> HTTP: for integrating the route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration.</p><p> HTTP_PROXY: for integrating route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p><p> MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: '<p>Specifies the Uniform Resource Identifier (URI) of the integration endpoint.</p><p>For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">RFC-3986 specification</a>, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.</p><p>For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the URI can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</p>'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.</p><p> WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p><p> NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p><p> WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name} , where  {location}  is querystring, path, or header; and  {name}  must be a valid and unique method request parameter name.'
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
  UpdateIntegrationRequest:
    type: object
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The identifier of the VpcLink used for the integration when the connectionType is VPC_LINK; otherwise undefined.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the integration
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p><p> AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration.</p><p> AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p><p> HTTP: for integrating the route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration.</p><p> HTTP_PROXY: for integrating route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p><p> MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: '<p>Specifies the Uniform Resource Identifier (URI) of the integration endpoint.</p><p>For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">RFC-3986 specification</a>, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.</p><p>For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the URI can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</p>'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.</p><p> WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p><p> NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p><p> WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name} , where  {location}  is querystring, path, or header; and  {name}  must be a valid and unique method request parameter name.'
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
  UpdateIntegrationResponseResponse:
    type: object
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
  UpdateIntegrationResponseRequest:
    type: object
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name} , where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name}  or integration.response.body.{JSON-expression} , where  {name}  is a valid and unique response header name and  {JSON-expression}  is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration response.
  UpdateModelResponse:
    type: object
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
  UpdateModelRequest:
    type: object
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
  UpdateRouteResult:
    type: object
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: 'The authorization scopes supported by this route. '
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
  UpdateRouteRequest:
    type: object
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for the route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: The authorization scopes supported by this route.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
  UpdateRouteResponseResponse:
    type: object
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
  UpdateRouteResponseRequest:
    type: object
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: The response models for the route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: The route response parameters.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The route response key.
  UpdateStageResponse:
    type: object
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier of the Deployment that the Stage is associated with.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&=,]+.'
  UpdateStageRequest:
    type: object
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: The default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The deployment identifier for the API stage.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the API stage.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&=,]+.'
  Arn:
    type: string
    description: Represents an Amazon Resource Name (ARN).
  StringWithLengthBetween1And1024:
    type: string
    description: 'A string with a length between [1-1024].'
  AccessLogSettings:
    type: object
    properties:
      DestinationArn:
        $ref: '#/definitions/Arn'
        description: The ARN of the CloudWatch Logs log group to receive access logs.
      Format:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
    description: Settings for logging access in a stage.
  __string:
    type: string
  Id:
    type: string
    description: 'An API Gateway-generated, unique identifier.'
  SelectionExpression:
    type: string
    description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html">Selection Expressions</a> for more information.'
  __timestampIso8601:
    type: string
    format: date-time
  StringWithLengthBetween0And1024:
    type: string
    description: 'A string with a length between [0-1024].'
  __boolean:
    type: boolean
  StringWithLengthBetween1And128:
    type: string
    description: 'A string with a length between [1-128].'
  ProtocolType:
    type: string
    enum:
      - WEBSOCKET
    description: ''
  StringWithLengthBetween1And64:
    type: string
    description: 'A string with a length between [1-64].'
  __listOf__string:
    type: array
    items:
      $ref: '#/definitions/__string'
  Api:
    type: object
    required:
      - RouteSelectionExpression
      - ProtocolType
      - Name
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: HTTP or WEBSOCKET.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
    description: Represents an API.
  AuthorizationScopes:
    type: array
    description: 'A list of authorization scopes configured on a route. The scopes are used with a COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
    items:
      $ref: '#/definitions/StringWithLengthBetween1And64'
  AuthorizationType:
    type: string
    enum:
      - NONE
      - AWS_IAM
      - CUSTOM
    description: 'The authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
  IntegerWithLengthBetween0And3600:
    type: integer
    description: 'An integer with a value between [0-3600].'
    minimum: 0
    maximum: 3600
  AuthorizerType:
    type: string
    enum:
      - REQUEST
    description: 'The authorizer type. Currently the only valid value is REQUEST, for a Lambda function using incoming request parameters.'
  UriWithLengthBetween1And2048:
    type: string
    description: 'A string representation of a URI with a length between [1-2048].'
  IdentitySourceList:
    type: array
    description: '<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</p>'
    items:
      $ref: '#/definitions/__string'
  ProviderArnList:
    type: array
    description: 'For REQUEST authorizer, this is not defined.'
    items:
      $ref: '#/definitions/Arn'
  Authorizer:
    type: object
    required:
      - Name
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: 'The time to live (TTL), in seconds, of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.'
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. Currently the only valid value is REQUEST, for a Lambda function using incoming request parameters.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'The authorizer''s Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api} , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.'
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header and a Name query string parameters are defined as identity sources, this value is method.request.header.Auth, method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: 'For REQUEST authorizer, this is not defined.'
    description: Represents an authorizer.
  ConnectionType:
    type: string
    enum:
      - INTERNET
      - VPC_LINK
    description: Represents a connection type.
  ContentHandlingStrategy:
    type: string
    enum:
      - CONVERT_TO_BINARY
      - CONVERT_TO_TEXT
    description: Specifies how to handle response payload content type conversions.
  SelectionKey:
    type: string
    description: 'After evaulating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
  DeploymentStatus:
    type: string
    enum:
      - PENDING
      - FAILED
      - DEPLOYED
    description: Represents a deployment status.
  StringWithLengthBetween1And512:
    type: string
    description: 'A string with a length between [1-512].'
  DomainNameConfigurations:
    type: array
    description: The domain name configurations.
    items:
      $ref: '#/definitions/DomainNameConfiguration'
  IntegrationType:
    type: string
    enum:
      - AWS
      - HTTP
      - MOCK
      - HTTP_PROXY
      - AWS_PROXY
    description: Represents an API method integration type.
  PassthroughBehavior:
    type: string
    enum:
      - WHEN_NO_MATCH
      - NEVER
      - WHEN_NO_TEMPLATES
    description: Represents passthrough behavior for an integration response.
  IntegrationParameters:
    type: array
    description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/__string'
        value:
          $ref: '#/definitions/StringWithLengthBetween1And512'
  TemplateMap:
    type: array
    description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/__string'
        value:
          $ref: '#/definitions/StringWithLengthBetween0And32K'
  IntegerWithLengthBetween50And29000:
    type: integer
    description: 'An integer with a value between [50-29000].'
    minimum: 50
    maximum: 29000
  StringWithLengthBetween1And256:
    type: string
    description: 'A string with a length between [1-256].'
  StringWithLengthBetween0And32K:
    type: string
    description: 'A string with a length between [0-32768].'
  RouteModels:
    type: array
    description: The route models.
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/__string'
        value:
          $ref: '#/definitions/StringWithLengthBetween1And128'
  RouteParameters:
    type: array
    description: The route parameters.
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/__string'
        value:
          $ref: '#/definitions/ParameterConstraints'
  RouteSettings:
    type: object
    properties:
      DataTraceEnabled:
        $ref: '#/definitions/__boolean'
        description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs.
      DetailedMetricsEnabled:
        $ref: '#/definitions/__boolean'
        description: Specifies whether detailed metrics are enabled.
      LoggingLevel:
        $ref: '#/definitions/LoggingLevel'
        description: 'Specifies the logging level for this route: DEBUG, INFO, or WARN. This property affects the log entries pushed to Amazon CloudWatch Logs.'
      ThrottlingBurstLimit:
        $ref: '#/definitions/__integer'
        description: Specifies the throttling burst limit.
      ThrottlingRateLimit:
        $ref: '#/definitions/__double'
        description: Specifies the throttling rate limit.
    description: Represents a collection of route settings.
  RouteSettingsMap:
    type: array
    description: The route settings map.
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/__string'
        value:
          $ref: '#/definitions/RouteSettings'
  StageVariablesMap:
    type: array
    description: The stage variable map.
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/__string'
        value:
          $ref: '#/definitions/StringWithLengthBetween0And2048'
  Deployment:
    type: object
    properties:
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
    description: An immutable representation of an API that can be called by users. A Deployment must be associated with a Stage for it to be callable over the internet.
  DomainName:
    type: object
    required:
      - DomainName
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
    description: Represents a domain name.
  EndpointType:
    type: string
    enum:
      - REGIONAL
      - EDGE
    description: Represents an endpoint type.
  DomainNameConfiguration:
    type: object
    properties:
      ApiGatewayDomainName:
        $ref: '#/definitions/__string'
        description: A domain name for the WebSocket API.
      CertificateArn:
        $ref: '#/definitions/Arn'
        description: An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
      CertificateName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
      CertificateUploadDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
      EndpointType:
        $ref: '#/definitions/EndpointType'
        description: The endpoint type.
      HostedZoneId:
        $ref: '#/definitions/__string'
        description: 'The Amazon Route 53 Hosted Zone ID of the endpoint. See <a href="docs.aws.amazon.com/general/latest/gr/rande.html#apigateway_region">AWS Regions and Endpoints for API Gateway</a>.'
    description: The domain name configuration.
  __listOfApi:
    type: array
    items:
      $ref: '#/definitions/Api'
  NextToken:
    type: string
    description: The next page of elements from this collection. Not valid for the last element of the collection.
  __listOfAuthorizer:
    type: array
    items:
      $ref: '#/definitions/Authorizer'
  __listOfDeployment:
    type: array
    items:
      $ref: '#/definitions/Deployment'
  __listOfDomainName:
    type: array
    items:
      $ref: '#/definitions/DomainName'
  __listOfIntegrationResponse:
    type: array
    items:
      $ref: '#/definitions/IntegrationResponse'
  __listOfIntegration:
    type: array
    items:
      $ref: '#/definitions/Integration'
  __listOfModel:
    type: array
    items:
      $ref: '#/definitions/Model'
  __listOfRouteResponse:
    type: array
    items:
      $ref: '#/definitions/RouteResponse'
  __listOfRoute:
    type: array
    items:
      $ref: '#/definitions/Route'
  __listOfStage:
    type: array
    items:
      $ref: '#/definitions/Stage'
  Integration:
    type: object
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The identifier of the VpcLink used for the integration when the connectionType is VPC_LINK; otherwise undefined.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: ''
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p><p> AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration.</p><p> AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p><p> HTTP: for integrating the route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC. This integration is also referred to as the HTTP custom integration.</p><p> HTTP_PROXY: for integrating route or method request with an HTTP endpoint, including a private HTTP endpoint within a VPC, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p><p> MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: '<p>Specifies the Uniform Resource Identifier (URI) of the integration endpoint.</p><p>For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">RFC-3986 specification</a>, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing.</p><p>For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the URI can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</p>'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.</p><p> WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p><p> NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p><p> WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name} , where  {location}  is querystring, path, or header; and  {name}  must be a valid and unique method request parameter name.'
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.'
    description: Represents an integration.
  IntegrationResponse:
    type: object
    required:
      - IntegrationResponseKey
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p><p> CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p><p> CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
    description: Represents an integration response.
  LoggingLevel:
    type: string
    enum:
      - ERROR
      - INFO
      - 'false'
    description: The logging level.
  Model:
    type: object
    required:
      - Name
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    description: 'Represents a data model for an API. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create Models and Mapping Templates for Request and Response Mappings</a>.'
  ParameterConstraints:
    type: object
    properties:
      Required:
        $ref: '#/definitions/__boolean'
        description: Whether or not the parameter is required.
    description: 'Validation constraints imposed on parameters of a request (path, query string, headers).'
  Route:
    type: object
    required:
      - RouteKey
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: 'The authorization scopes supported by this route. '
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    description: Represents a route.
  RouteResponse:
    type: object
    required:
      - RouteResponseKey
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
    description: Represents a route response.
  __integer:
    type: integer
  __double:
    type: number
    format: double
  Stage:
    type: object
    required:
      - StageName
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier of the Deployment that the Stage is associated with.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&=,]+.'
    description: Represents an API stage.
  StringWithLengthBetween0And2048:
    type: string
    description: 'A string with a length between [0-2048].'
