swagger: '2.0'
info:
  version: '2018-10-01'
  x-release: v4
  title: AWS App Mesh
  description: |-
    <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and
             control containerized microservices. App Mesh standardizes how your microservices
             communicate, giving you end-to-end visibility and helping to ensure high-availability for
             your applications.</p>
             <p>App Mesh gives you consistent visibility and network traffic controls for every
             microservice in an application. You can use App Mesh with Amazon ECS
             (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>
             <note>
                <p>App Mesh supports containerized microservice applications that use service discovery
                naming for their components. To use App Mesh, you must have a containerized application
                running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For
                more information about service discovery on Amazon ECS, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the
                   <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.
                For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
                   for Services and Pods</a> in the Kubernetes documentation.</p>
             </note>
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: appmesh
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2018-10-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/appmesh/'
host: appmesh.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: query
    type: string
    required: true
  Version:
    name: Version
    in: query
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /meshes:
    put:
      operationId: CreateMesh
      description: |-
        <p>Creates a new service mesh. A service mesh is a logical boundary for network traffic
                 between the services that reside within it.</p>
                 <p>After you create your service mesh, you can create virtual nodes, virtual routers, and
                 routes to distribute traffic between the applications in your mesh.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateMeshInput'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListMeshes
      description: Returns a list of existing service meshes.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListMeshesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListMeshesInput'
        - name: limit
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
  '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes':
    put:
      operationId: CreateRoute
      description: |-
        <p>Creates a new route that is associated with a virtual router.</p>
                 <p>You can use the <code>prefix</code> parameter in your route specification for path-based
                 routing of requests. For example, if your virtual router service name is
                    <code>my-service.local</code>, and you want the route to match requests to
                    <code>my-service.local/metrics</code>, then your prefix should be
                 <code>/metrics</code>.</p>
                 <p>If your route matches a request, you can distribute traffic to one or more target
                 virtual nodes with relative weighting.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateRouteInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualRouterName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListRoutes
      description: Returns a list of existing routes in a service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListRoutesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListRoutesInput'
        - name: limit
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualRouterName
          type: string
          in: path
          required: true
  '/meshes/{meshName}/virtualNodes':
    put:
      operationId: CreateVirtualNode
      description: |-
        <p>Creates a new virtual node within a service mesh.</p>
                 <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS
                 service or a Kubernetes deployment. When you create a virtual node, you must specify the
                 DNS service discovery name for your task group.</p>
                 <p>Any inbound traffic that your virtual node expects should be specified as a
                    <code>listener</code>. Any outbound traffic that your virtual node expects to reach
                 should be specified as a <code>backend</code>.</p>
                 <p>The response metadata for your new virtual node contains the <code>arn</code> that is
                 associated with the virtual node. Set this value (either the full ARN or the truncated
                 resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the
                    <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
                 proxy container in your task definition or pod spec. This is then mapped to the
                    <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                 <note>
                    <p>If you require your Envoy stats or tracing to use a different name, you can override
                    the <code>node.cluster</code> value that is set by
                       <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                       <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                 </note>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateVirtualNodeInput'
        - name: meshName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualNodes
      description: Returns a list of existing virtual nodes.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualNodesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListVirtualNodesInput'
        - name: limit
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: meshName
          type: string
          in: path
          required: true
  '/meshes/{meshName}/virtualRouters':
    put:
      operationId: CreateVirtualRouter
      description: |-
        <p>Creates a new virtual router within a service mesh.</p>
                 <p>Virtual routers handle traffic for one or more service names within your mesh. After you
                 create your virtual router, create and associate routes for your virtual router that direct
                 incoming requests to different virtual nodes.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateVirtualRouterInput'
        - name: meshName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualRouters
      description: Returns a list of existing virtual routers in a service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualRoutersOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListVirtualRoutersInput'
        - name: limit
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: meshName
          type: string
          in: path
          required: true
  '/meshes/{meshName}':
    delete:
      operationId: DeleteMesh
      description: |-
        <p>Deletes an existing service mesh.</p>
                 <p>You must delete all resources (routes, virtual routers, virtual nodes) in the service
                 mesh before you can delete the mesh itself.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteMeshInput'
        - name: meshName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeMesh
      description: Describes an existing service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeMeshInput'
        - name: meshName
          type: string
          in: path
          required: true
  '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}':
    delete:
      operationId: DeleteRoute
      description: Deletes an existing route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteRouteInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualRouterName
          type: string
          in: path
          required: true
        - name: routeName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeRoute
      description: Describes an existing route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeRouteInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualRouterName
          type: string
          in: path
          required: true
        - name: routeName
          type: string
          in: path
          required: true
    put:
      operationId: UpdateRoute
      description: Updates an existing route for a specified service mesh and virtual router.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRouteInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualRouterName
          type: string
          in: path
          required: true
        - name: routeName
          type: string
          in: path
          required: true
  '/meshes/{meshName}/virtualNodes/{virtualNodeName}':
    delete:
      operationId: DeleteVirtualNode
      description: Deletes an existing virtual node.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteVirtualNodeInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualNodeName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualNode
      description: Describes an existing virtual node.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeVirtualNodeInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualNodeName
          type: string
          in: path
          required: true
    put:
      operationId: UpdateVirtualNode
      description: Updates an existing virtual node in a specified service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateVirtualNodeInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualNodeName
          type: string
          in: path
          required: true
  '/meshes/{meshName}/virtualRouters/{virtualRouterName}':
    delete:
      operationId: DeleteVirtualRouter
      description: |-
        <p>Deletes an existing virtual router.</p>
                 <p>You must delete any routes associated with the virtual router before you can delete the
                 router itself.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteVirtualRouterInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualRouterName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualRouter
      description: Describes an existing virtual router.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeVirtualRouterInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualRouterName
          type: string
          in: path
          required: true
    put:
      operationId: UpdateVirtualRouter
      description: Updates an existing virtual router in a specified service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateVirtualRouterInput'
        - name: meshName
          type: string
          in: path
          required: true
        - name: virtualRouterName
          type: string
          in: path
          required: true
definitions:
  CreateMeshOutput:
    type: object
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The full description of your service mesh following the create call.
    description: ''
  CreateMeshInput:
    type: object
    required:
      - meshName
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the service mesh.
    description: ''
  BadRequestException: {}
  ConflictException: {}
  ForbiddenException: {}
  InternalServerErrorException: {}
  LimitExceededException: {}
  NotFoundException: {}
  ServiceUnavailableException: {}
  TooManyRequestsException: {}
  CreateRouteOutput:
    type: object
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The full description of your mesh following the create call.
    description: ''
  CreateRouteInput:
    type: object
    required:
      - routeName
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the route.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The route specification to apply.
    description: ''
  CreateVirtualNodeOutput:
    type: object
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The full description of your virtual node following the create call.
    description: ''
  CreateVirtualNodeInput:
    type: object
    required:
      - spec
      - virtualNodeName
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The virtual node specification to apply.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the virtual node.
    description: ''
  CreateVirtualRouterOutput:
    type: object
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The full description of your virtual router following the create call.
    description: ''
  CreateVirtualRouterInput:
    type: object
    required:
      - spec
      - virtualRouterName
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The virtual router specification to apply.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the virtual router.
    description: ''
  DeleteMeshOutput:
    type: object
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The service mesh that was deleted.
    description: ''
  DeleteMeshInput:
    type: object
    properties: {}
    description: ''
  ResourceInUseException: {}
  DeleteRouteOutput:
    type: object
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The route that was deleted.
    description: ''
  DeleteRouteInput:
    type: object
    properties: {}
    description: ''
  DeleteVirtualNodeOutput:
    type: object
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The virtual node that was deleted.
    description: ''
  DeleteVirtualNodeInput:
    type: object
    properties: {}
    description: ''
  DeleteVirtualRouterOutput:
    type: object
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The virtual router that was deleted.
    description: ''
  DeleteVirtualRouterInput:
    type: object
    properties: {}
    description: ''
  DescribeMeshOutput:
    type: object
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The full description of your service mesh.
    description: ''
  DescribeMeshInput:
    type: object
    properties: {}
    description: ''
  DescribeRouteOutput:
    type: object
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The full description of your route.
    description: ''
  DescribeRouteInput:
    type: object
    properties: {}
    description: ''
  DescribeVirtualNodeOutput:
    type: object
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The full description of your virtual node.
    description: ''
  DescribeVirtualNodeInput:
    type: object
    properties: {}
    description: ''
  DescribeVirtualRouterOutput:
    type: object
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The full description of your virtual router.
    description: ''
  DescribeVirtualRouterInput:
    type: object
    properties: {}
    description: ''
  ListMeshesOutput:
    type: object
    required:
      - meshes
    properties:
      meshes:
        $ref: '#/definitions/MeshList'
        description: The list of existing service meshes.
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListMeshes</code>
                   request. When the results of a <code>ListMeshes</code> request exceed
                   <code>limit</code>, this value can be used to retrieve the next page of
                   results. This value is <code>null</code> when there are no more results to
                   return.
    description: ''
  ListMeshesInput:
    type: object
    properties: {}
    description: ''
  ListRoutesOutput:
    type: object
    required:
      - routes
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListRoutes</code>
                   request. When the results of a <code>ListRoutes</code> request exceed
                   <code>limit</code>, this value can be used to retrieve the next page of
                   results. This value is <code>null</code> when there are no more results to
                   return.
      routes:
        $ref: '#/definitions/RouteList'
        description: The list of existing routes for the specified service mesh and virtual router.
    description: ''
  ListRoutesInput:
    type: object
    properties: {}
    description: ''
  ListVirtualNodesOutput:
    type: object
    required:
      - virtualNodes
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code>
                   request. When the results of a <code>ListVirtualNodes</code> request exceed
                   <code>limit</code>, this value can be used to retrieve the next page of
                   results. This value is <code>null</code> when there are no more results to
                   return.
      virtualNodes:
        $ref: '#/definitions/VirtualNodeList'
        description: The list of existing virtual nodes for the specified service mesh.
    description: ''
  ListVirtualNodesInput:
    type: object
    properties: {}
    description: ''
  ListVirtualRoutersOutput:
    type: object
    required:
      - virtualRouters
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code>
                   request. When the results of a <code>ListVirtualRouters</code> request exceed
                   <code>limit</code>, this value can be used to retrieve the next page of
                   results. This value is <code>null</code> when there are no more results to
                   return.
      virtualRouters:
        $ref: '#/definitions/VirtualRouterList'
        description: The list of existing virtual routers for the specified service mesh.
    description: ''
  ListVirtualRoutersInput:
    type: object
    properties: {}
    description: ''
  UpdateRouteOutput:
    type: object
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: A full description of the route that was updated.
    description: ''
  UpdateRouteInput:
    type: object
    required:
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The new route specification to apply. This overwrites the existing data.
    description: ''
  UpdateVirtualNodeOutput:
    type: object
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: A full description of the virtual node that was updated.
    description: ''
  UpdateVirtualNodeInput:
    type: object
    required:
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The new virtual node specification to apply. This overwrites the existing data.
    description: ''
  UpdateVirtualRouterOutput:
    type: object
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: A full description of the virtual router that was updated.
    description: ''
  UpdateVirtualRouterInput:
    type: object
    required:
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The new virtual router specification to apply. This overwrites the existing data.
    description: ''
  ServiceName:
    type: string
  HealthCheckThreshold:
    type: integer
    minimum: 2
    maximum: 10
  MeshData:
    type: object
    required:
      - meshName
      - metadata
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the service mesh.
      status:
        $ref: '#/definitions/MeshStatus'
        description: The status of the service mesh.
    description: An object representing a service mesh returned by a describe operation.
  Long:
    type: integer
  VirtualRouterData:
    type: object
    required:
      - meshName
      - virtualRouterName
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh in which the virtual router resides.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the virtual router.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The specifications of the virtual router.
      status:
        $ref: '#/definitions/VirtualRouterStatus'
        description: The current status of the virtual router.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual router.
    description: An object representing a virtual router returned by a describe operation.
  MeshStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  PortNumber:
    type: integer
    minimum: 1
    maximum: 65535
  ResourceName:
    type: string
    minLength: 1
    maxLength: 255
  PercentInt:
    type: integer
    minimum: 0
    maximum: 100
  WeightedTarget:
    type: object
    properties:
      virtualNode:
        $ref: '#/definitions/ResourceName'
        description: The virtual node to associate with the weighted target.
      weight:
        $ref: '#/definitions/PercentInt'
        description: The relative weight of the weighted target.
    description: |-
      An object representing a target and its relative weight. Traffic is distributed across
               targets according to their relative weight. For example, a weighted target with a relative
               weight of 50 receives five times as much traffic as one with a relative weight of
               10.
  VirtualNodeRef:
    type: object
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the virtual node.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh in which the virtual node resides.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual node.
    description: An object representing a virtual node returned by a list operation.
  VirtualNodeList:
    type: array
    items:
      $ref: '#/definitions/VirtualNodeRef'
  RouteData:
    type: object
    required:
      - meshName
      - routeName
      - virtualRouterName
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh in which the route resides.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the route.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the route.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The specifications of the route.
      status:
        $ref: '#/definitions/RouteStatus'
        description: The status of the route.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The virtual router with which the route is associated.
    description: An object representing a route returned by a describe operation.
  RouteRef:
    type: object
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the route.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh in which the route resides.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the route.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The virtual router with which the route is associated.
    description: An object representing a route returned by a list operation.
  RouteList:
    type: array
    items:
      $ref: '#/definitions/RouteRef'
  ListVirtualRoutersLimit:
    type: integer
    minimum: 1
    maximum: 100
  DnsServiceDiscovery:
    type: object
    properties:
      serviceName:
        $ref: '#/definitions/ServiceName'
        description: The DNS service name for your virtual node.
    description: The DNS service discovery information for your virtual node.
  HealthCheckIntervalMillis:
    type: integer
    minimum: 5000
    maximum: 300000
  Arn:
    type: string
  ServiceDiscovery:
    type: object
    properties:
      dns:
        $ref: '#/definitions/DnsServiceDiscovery'
        description: Specifies the DNS service name for the virtual node.
    description: An object representing the service discovery information for a virtual node.
  MeshStatus:
    type: object
    properties:
      status:
        $ref: '#/definitions/MeshStatusCode'
        description: The current mesh status.
    description: An object representing the status of a service mesh.
  ResourceMetadata:
    type: object
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: |-
          <p>The full Amazon Resource Name (ARN) for the resource.</p>
                   <note>
                      <p>After you create a virtual node, set this value (either the full ARN or the
                      truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,
                      as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's
                      Envoy proxy container in your task definition or pod spec. This is then mapped to the
                         <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                      <p>If you require your Envoy stats or tracing to use a different name, you can override
                      the <code>node.cluster</code> value that is set by
                         <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                         <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                   </note>
      createdAt:
        $ref: '#/definitions/Timestamp'
        description: The Unix epoch timestamp in seconds for when the resource was created.
      lastUpdatedAt:
        $ref: '#/definitions/Timestamp'
        description: The Unix epoch timestamp in seconds for when the resource was last updated.
      uid:
        $ref: '#/definitions/String'
        description: The unique identifier for the resource.
      version:
        $ref: '#/definitions/Long'
        description: |-
          The version of the resource. Resources are created at version 1, and this version is
                   incremented each time they are updated.
    description: An object representing metadata for a resource.
  VirtualNodeSpec:
    type: object
    properties:
      backends:
        $ref: '#/definitions/Backends'
        description: The backends to which the virtual node is expected to send outbound traffic.
      listeners:
        $ref: '#/definitions/Listeners'
        description: The listeners from which the virtual node is expected to receive inbound traffic.
      serviceDiscovery:
        $ref: '#/definitions/ServiceDiscovery'
        description: The service discovery information for the virtual node.
    description: An object representing the specification of a virtual node.
  VirtualNodeStatus:
    type: object
    properties:
      status:
        $ref: '#/definitions/VirtualNodeStatusCode'
        description: The current status of the virtual node.
    description: An object representing the current status of the virtual node.
  VirtualNodeData:
    type: object
    required:
      - meshName
      - virtualNodeName
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh in which the virtual node resides.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the virtual node.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The specifications of the virtual node.
      status:
        $ref: '#/definitions/VirtualNodeStatus'
        description: The current status for the virtual node.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual node.
    description: An object representing a virtual node returned by a describe operation.
  Backends:
    type: array
    items:
      $ref: '#/definitions/ServiceName'
  Listeners:
    type: array
    items:
      $ref: '#/definitions/Listener'
  ServiceNames:
    type: array
    items:
      $ref: '#/definitions/ServiceName'
    maxItems: 10
  MeshRef:
    type: object
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) of the service mesh.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh.
    description: An object representing a service mesh returned by a list operation.
  WeightedTargets:
    type: array
    items:
      $ref: '#/definitions/WeightedTarget'
  HttpRouteAction:
    type: object
    properties:
      weightedTargets:
        $ref: '#/definitions/WeightedTargets'
        description: |-
          The targets that traffic is routed to when a request matches the route. You can specify
                   one or more targets and their relative weights with which to distribute traffic.
    description: |-
      An object representing the traffic distribution requirements for matched HTTP
               requests.
  HealthCheckTimeoutMillis:
    type: integer
    minimum: 2000
    maximum: 60000
  String:
    type: string
  VirtualRouterSpec:
    type: object
    properties:
      serviceNames:
        $ref: '#/definitions/ServiceNames'
        description: The service mesh service names to associate with the virtual router.
    description: An object representing the specification of a virtual router.
  RouteStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  RouteStatus:
    type: object
    properties:
      status:
        $ref: '#/definitions/RouteStatusCode'
        description: The current status for the route.
    description: An object representing the current status of a route.
  ListMeshesLimit:
    type: integer
    minimum: 1
    maximum: 100
  VirtualRouterStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  VirtualRouterStatus:
    type: object
    properties:
      status:
        $ref: '#/definitions/VirtualRouterStatusCode'
        description: The current status of the virtual router.
    description: 'An object representing the status of a virtual router. '
  MeshList:
    type: array
    items:
      $ref: '#/definitions/MeshRef'
  RouteSpec:
    type: object
    properties:
      httpRoute:
        $ref: '#/definitions/HttpRoute'
        description: The HTTP routing information for the route.
    description: An object representing the specification of a route.
  Listener:
    type: object
    properties:
      healthCheck:
        $ref: '#/definitions/HealthCheckPolicy'
        description: The health check information for the listener.
      portMapping:
        $ref: '#/definitions/PortMapping'
        description: The port mapping information for the listener.
    description: An object representing a listener for a virtual node.
  ListRoutesLimit:
    type: integer
    minimum: 1
    maximum: 100
  HttpRouteMatch:
    type: object
    properties:
      prefix:
        $ref: '#/definitions/String'
        description: |-
          Specifies the path with which to match requests. This parameter must always start with
                      <code>/</code>, which by itself matches all requests to the virtual router service name.
                   You can also match for path-based routing of requests. For example, if your virtual router
                   service name is <code>my-service.local</code>, and you want the route to match requests to
                      <code>my-service.local/metrics</code>, then your prefix should be
                   <code>/metrics</code>.
    description: |-
      An object representing the requirements for a route to match HTTP requests for a virtual
               router.
  HttpRoute:
    type: object
    properties:
      action:
        $ref: '#/definitions/HttpRouteAction'
        description: The action to take if a match is determined.
      match:
        $ref: '#/definitions/HttpRouteMatch'
        description: The criteria for determining an HTTP request match.
    description: An object representing the HTTP routing specification for a route.
  Timestamp:
    type: string
    format: date-time
  VirtualRouterRef:
    type: object
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the virtual router.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh in which the virtual router resides.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual router.
    description: An object representing a virtual router returned by a list operation.
  VirtualRouterList:
    type: array
    items:
      $ref: '#/definitions/VirtualRouterRef'
  PortProtocol:
    type: string
    enum:
      - http
      - tcp
  PortMapping:
    type: object
    properties:
      port:
        $ref: '#/definitions/PortNumber'
        description: The port used for the port mapping.
      protocol:
        $ref: '#/definitions/PortProtocol'
        description: The protocol used for the port mapping.
    description: An object representing a virtual node listener port mapping.
  VirtualNodeStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  HealthCheckPolicy:
    type: object
    required:
      - healthyThreshold
      - intervalMillis
      - protocol
      - timeoutMillis
      - unhealthyThreshold
    properties:
      healthyThreshold:
        $ref: '#/definitions/HealthCheckThreshold'
        description: |-
          The number of consecutive successful health checks that must occur before declaring
                   listener healthy.
      intervalMillis:
        $ref: '#/definitions/HealthCheckIntervalMillis'
        description: The time period in milliseconds between each health check execution.
      path:
        $ref: '#/definitions/String'
        description: |-
          The destination path for the health check request. This is only required if the
                   specified protocol is HTTP; if the protocol is TCP, then this parameter is ignored.
      port:
        $ref: '#/definitions/PortNumber'
        description: |-
          The destination port for the health check request. This port must match the port defined
                   in the <a>PortMapping</a> for the listener.
      protocol:
        $ref: '#/definitions/PortProtocol'
        description: The protocol for the health check request.
      timeoutMillis:
        $ref: '#/definitions/HealthCheckTimeoutMillis'
        description: |-
          The amount of time to wait when receiving a response from the health check, in
                   milliseconds.
      unhealthyThreshold:
        $ref: '#/definitions/HealthCheckThreshold'
        description: |-
          The number of consecutive failed health checks that must occur before declaring a
                   virtual node unhealthy. 
    description: An object representing the health check policy for a virtual node's listener.
  ListVirtualNodesLimit:
    type: integer
    minimum: 1
    maximum: 100
